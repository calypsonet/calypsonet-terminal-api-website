@startuml

' == THEME ==

'Couleurs issues de : https://htmlcolorcodes.com/fr/tableau-de-couleur/tableau-de-couleur-design-plat/
!define C_GREY1 F8F9F9
!define C_GREY2 F2F3F4
!define C_GREY3 E5E7E9
!define C_GREY4 D7DBDD
!define C_GREY5 CACFD2
!define C_GREY6 BDC3C7
!define C_LINK 3498DB
!define C_USE 27AE60

' -- Styles that don't work with new version of plantuml --
skinparam stereotypeABorderColor #A9DCDF
skinparam stereotypeIBorderColor #B4A7E5
skinparam stereotypeCBorderColor #ADD1B2
skinparam stereotypeEBorderColor #EB93DF
' -- END --

skinparam ClassBorderThickness 2
skinparam ArrowThickness 2

' Yellow
skinparam ClassBackgroundColor #FEFECE
skinparam ClassBorderColor #D4AC0D
' Red
skinparam ClassBackgroundColor<<red>> #FDEDEC
skinparam ClassBorderColor<<red>> #E74C3C
hide <<red>> stereotype
' Purple
skinparam ClassBackgroundColor<<purple>> #F4ECF7
skinparam ClassBorderColor<<purple>> #8E44AD
hide <<purple>> stereotype
' blue
skinparam ClassBackgroundColor<<blue>> #EBF5FB
skinparam ClassBorderColor<<blue>> #3498DB
hide <<blue>> stereotype
' Green
skinparam ClassBackgroundColor<<green>> #E9F7EF
skinparam ClassBorderColor<<green>> #27AE60
hide <<green>> stereotype
' Grey
skinparam ClassBackgroundColor<<grey>> #EAECEE
skinparam ClassBorderColor<<grey>> #2C3E50
hide <<grey>> stereotype

' == CONTENT ==

        +interface "<<<back:yellow>SmartCard</back>>>\nCalypsoSam" as CalypsoSam {

        }

        +interface "<<<back:yellow>CalypsoSam</back>>>\nLegacySam" as LegacySam extends CalypsoSam {
            +ProductType getProductType ()
            +String getProductInfo ()

            +byte[] getSerialNumber ()
            +byte getPlatform ()
            +byte getApplicationType ()
            +byte getApplicationSubType ()
            +byte getSoftwareIssuer ()
            +byte getSoftwareVersion ()
            +byte getSoftwareRevision ()

           +int getEventCounterValue(int numCounter 0..8)
           +int getEventCeilingValue(int numCounter 0..8)
           +byte[] getSystemKeyParameters(LegacySytemKey systemKeyRefeence)
           +byte[] getWorkKeyParameters(int numWorkKey 1..126)

        }

        +enum "ProductType" as SamProductType {
            SAM_C1
            HSM_C1
            SAM_S1E1
            SAM_S1Dx
            CSAM_F
            UNKNOWN
        }

        LegacySam +-- SamProductType
        LegacySam ..> SamProductType #C_LINK : provide >

        +interface "<<<back:yellow>CalypsoSam</back>>>\nOpenSam" as OpenSam  extends CalypsoSam {
            ????

        }

        +interface SamTransactionManager extends CommonTransactionManager {
            +<back:yellow>CardReader</back> getSamReader ()
            +CalypsoSam getCalypsoSam ()
        }

        +interface LegacySamTransactionManager extends SamTransactionManager {
            ????

        }


        +interface LegacySamOperations {
        }

        +interface LegacyReadOperations extends LegacySamOperations {
            prepareReadSamParamters()
            prepareReadCaadRecord(int caadRecordReference 1..7)

            prepareReadSystemKeyParamters(LegacySystemKey systemKeyReference)
            prepareReadWorkKeyParamters(int workKeyRecordNumber 1..126)
            prepareReadWorkKeyParamters(byte workKeyKif, byte workKeyKvc)

            prepareReadCounterValue(int counterReference 0..26)
            prepareReadCounterCeiling(int counterReference 0..26)
        }


        +interface LegacyFreeWriteOperations extends LegacySamOperations {
            prepareWriteExternalPlainWorkKey(byte workKeyKif, byte workKeyKvc, byte[] workKeyParameters, byte[] workKeyValue)
            prepareWriteRandomlyGeneratedWorkKey(byte workKeyKif, byte workKeyKvc, byte[] workKeyParameters)
        }

        +interface LegacyControlledWriteOperations extends LegacyFreeWriteOperations {
            prepareWriteSamParamters(byte[] parametersData)
            prepareWriteCaadRecord(int caadRecordReference 1..7, byte[] caadData)

            prepareWriteTransferredCipheredSystemKey(LegacySystemKey sourceWorkKeyKif, byte sourceWorkKeyKvc, byte cipheringSytemKeyKvc)
            prepareWriteTransferredPlainWorkKey(byte sourceWorkKeyKif, byte sourceWorkKeyKvc, byte[] workKeyParameters)
            prepareWriteTransferredCipheredWorkKey(byte sourceWorkKeyKif, byte sourceWorkKeyKvc, byte[] workKeyParameters, byte cipheringSytemKeyKvc)

            prepareWriteCounterCeiling(int counterReference 0..26, int ceilingValue)
        }


        +interface LegacyFreeSamTransaction extends LegacySamTransactionManager {
        -- processCommand of 'prepared' LegacyReadOperations or LegacyFreeWriteOperations
        }

        +interface LegacySecureReadTransaction extends LegacySamTransactionManager {
        -- setting of transaction challenge provided by the terminal or by the control SAM
        -- processCommand of 'prepared' LegacyReadOperations
        -- for each read in the target SAM, the control SAM checks the certificate
        }

        +interface LegacyDynamicSecureWriteTransaction extends LegacySamTransactionManager {
'            +prepareManageSecureWrite(flag dynamic/static)
'            +prepareWriteCeiling()
'            +prepareImportCipheredDataToStaticWrite(String ciphereData)
        -- processCommand of 'prepared' LegacyControlledWriteOperations
        }

        +interface LegacyStaticSecureWriteTransaction extends LegacySamTransactionManager {
        +prepareImportCipheredDataToStaticWrite(String cipheredSamOperations)
        -- processCommand of 'exported' cipheredSamOperations from a control SAM
        }


        +interface LegacyControlStaticWriteTransaction extends LegacySamTransactionManager {
            +prepareGiveTargetSamPseudoRandom(statisRandom)

            -- of 'prepared' LegacyControlledWriteOperations
            String +processExportSamCipheredDataToSamWrite()
        }

        +interface OpenSamTransactionManager extends SamTransactionManager {
            ????

        }

'        +interface LegacySamReadOperation {
'            LegacySamReadOperation +prepareReadSystemKeyParameters(LegacySytemKey keyUsage)
'            LegacySamReadOperation +prepareReadWorkKeyParameters(byte kif, byte kvc)
'            LegacySamReadOperation +prepareReadWorkKeyParameters(int keyRecord 1..126)
'
'            LegacySamReadOperation +prepareReadEventCounter(int counterNumber 0..26)
'            LegacySamReadOperation +prepareReadCounterLimit(int counterNumber 0..26)
'
'        }

        +enum LegacySytemKey {
            PERSONALIZATION
            WORK_FILE
            RELOADING
            AUTHENTICATION
        }

        LegacySam +- LegacySytemKey #C_USE : use >

        +interface CommonTransactionManager<T extends CommonTransactionManager<T, S>,\nS extends CommonSecuritySetting<S>> {
            +S getSecuritySetting ()
            +List<byte[]> getTransactionAuditData ()

            +T prepareComputeSignature (CommonSignatureComputationData<?> data)
            +T prepareVerifySignature (CommonSignatureVerificationData<?> data)

            +T processCommands ()
        }

@enduml