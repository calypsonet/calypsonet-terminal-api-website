@startuml

'skinparam ClassBorderColor #F1C40F
skinparam ClassBorderColor #D4AC0D
skinparam stereotypeABorderColor #A9DCDF
skinparam stereotypeIBorderColor #B4A7E5
skinparam stereotypeCBorderColor #ADD1B2
skinparam stereotypeEBorderColor #EB93DF
skinparam shadowing false

skinparam StateBorderColor #D4AC0D
skinparam ActivityBorderColor #D4AC0D

' Red
skinparam ClassBackgroundColor<<red>> #FDEDEC
skinparam ClassBorderColor<<red>> #E74C3C
hide <<red>> stereotype
' Purple
skinparam ClassBackgroundColor<<purple>> #F4ECF7
skinparam ClassBorderColor<<purple>> #8E44AD
hide <<purple>> stereotype
' blue
skinparam ClassBackgroundColor<<blue>> #EBF5FB
skinparam ClassBorderColor<<blue>> #3498DB
hide <<blue>> stereotype
' Green
skinparam ClassBackgroundColor<<green>> #EAFAF1
skinparam ClassBorderColor<<green>> #2ECC71
hide <<green>> stereotype

' Orange
skinparam ClassBackgroundColor<<orange>> #FDF2E9
skinparam ClassBorderColor<<orange>> #E67E22
hide <<orange>> stereotype

' Grey
skinparam ClassBackgroundColor<<grey>> #EAECEE
skinparam ClassBorderColor<<grey>> #2C3E50
hide <<grey>> stereotype

actor "Ticketing Application" as app #gold
participant "Reader API" as rapi #pink
participant "Calypso\nCard API" as capi #lightBlue
participant "Calypso Card Reader\n\n**dynamic** presence" as cardReader #lightBlue
boundary "**Card**" as card #lightBlue
participant "Calypso SAM\nAPI" as sapi #lightGreen
participant "Calypso SAM Reader\n\n**static** presence" as samReader #lightGreen
boundary "**SAM**" as sam #lightGreen

activate app #gold
'activate sam #lightGreen

== Access Control embedded Terminal settings ==

app->app: **set** Calypso SAM lib

hnote over samReader #Orange
reader in state:
**Card Inserted**
endhnote

app->sapi: <font color=red>**prepare**</font> card selection:\n\t- filter by Power-On data
activate sapi  #lightGreen
sapi-->app
deactivate sapi

app->rapi: <font color=red>**prepare**</font> card selection scenario:\n\t- legacy SAM selection
activate rapi  #pink
rapi-->app
deactivate rapi


app->rapi: <font color=red>**process**</font> synchronous card selection scenario
activate rapi  #pink
rapi-[#00FF00]>samReader: <font color=green>**SAM #x**</font>\ntransmit selection request\n\t- card selector
activate samReader #lightGreen

samReader->sam: open card channel
activate sam #lightGreen
sam-->samReader

samReader--[#00FF00]>rapi: receive selection response
deactivate samReader

note over sapi
    The SAM remains permanently selected between card transactions.
end note


rapi-->app: selected active SmartCard image
deactivate rapi

app->sapi: **cast** SAM card
activate sapi  #lightGreen
sapi-->app: [legacy SAM image:\n\t- identification data]
deactivate sapi

note over sapi
    Apart from SAM module selection, a secure transaction with
    a Calypso card is managed independently of the SAM API.
end note

app->capi: **init** crypto context for next transaction
activate capi  #lightBlue

capi-[#00FF00]>samReader: <font color=green>**SAM #x'**</font>\ntransmit card request\n\t- APDU list
activate samReader #lightGreen
samReader->sam: get challenge
sam-->samReader: [SAM challenge]
samReader-[#00FF00]->capi: [SAM challenge]
deactivate samReader

capi-->app
deactivate capi


app->capi: <font color=red>**prepare**</font> card selection:\n\t- filter by specific AID\n\t- filter invalidated card status
activate capi  #lightBlue
capi-->app
deactivate capi

app->rapi: <font color=red>**prepare**</font> card selection scenario:\n\t- Calypso card selection
activate rapi  #pink
rapi-->app
deactivate rapi

app->rapi: <font color=red>**schedule**</font> asynchronous card selection scenario
activate rapi  #pink
rapi-->app

app->rapi: add **observer**
rapi-->app
app->rapi: **start detection** - repeating mode

hnote over cardReader #Orange
reader in state:
**Wait For Card Insertion**
endhnote

rapi-->app

deactivate rapi

app->app: **wait** for card presence

== Access Control operation start\nCard selection & identification ==

cardReader<[#Orange]-? : card **insertion**  .  .  .  .  .

hnote over cardReader #Orange
reader in state:
**Wait For Card Processing**
endhnote

cardReader-[#Orange]>rapi: **insertion**

activate rapi  #pink
rapi-[#0000FF]>cardReader: <font color=blue>**Card #1**</font>\ntransmit selection request\n\t- card selector
activate cardReader #lightBlue

cardReader->card: open card channel
activate card #lightBlue
card-->cardReader

hnote over card #PowderBlue
card in state:
**ratified**
endhnote

cardReader->card: select application (aid)
card-->cardReader: [card FCI]

cardReader--[#0000FF]>rapi: receive selection response
deactivate cardReader

rapi->rapi: checks invalidation status
rnote right rapi #Thistle
️⚠️if (card invalidated) → app not notified of card selection
close channel & wait for card removal from reader
endrnote

rapi-->app: **notify** scheduled card selections responsee
deactivate rapi

app->rapi: <font color=red>**parse**</font> scheduled card selections response
activate rapi  #pink
rapi-->app: selected active SmartCard image
deactivate rapi

app->capi: **cast** Calypso card
activate capi  #lightBlue
capi-->app: [Calypso card image:\n\t- identification data\n\t- invalidation status]
deactivate capi

app->app: **get** card file structure reference\nfrom card image

== Card secure transaction ==

app->app: **instantiate** Calypso card transaction:\n\t- Calypso card resource\n\t- Calypso SAM resource

note over capi
    Only reads ticketing data inside the session.
end note


app->capi: <font color=red>**prepare**</font> card transaction:\n\t- open secure session (DEBIT access level)\n\t- read environment file
activate capi  #lightBlue
capi-->app
deactivate capi

app->capi: <font color=red>**process**</font> commands (**keep** channel open)
activate capi  #lightBlue

capi-[#00FF00]>capi: <:sunglasses:> SAM challenge already known\nno need to request it during\nthe card transaction


capi-[#0000FF]>cardReader: <font color=blue>**Card #2**</font>\ntransmit card request\n\t- APDU list
activate cardReader #lightBlue

group Card APDU commands inside session
note over cardReader
    <:sunglasses:> Optimization: environment file read through the session opening.
end note

    cardReader->card: open secure session (card debit key,\n\tSAM challenge,\n\tSFI environment to read)
    card-->cardReader: [card challenge & ratification status\n  environment data]
end

cardReader--[#0000FF]>capi: [card challenge & ratification status\n  environment data]
deactivate cardReader

capi-->app: [Calypso card image:\n\t- identification data\n\t- invalidation status\n\t- environment data\n\t- ratification status]
deactivate capi

app->app: **get** ticketing environment data\nfrom card image

app->capi: <font color=red>**prepare**</font> card transaction:\n\t- read last event
activate capi  #lightBlue
capi-->app
deactivate capi

app->capi: <font color=red>**process**</font> commands (**keep** channel open)
activate capi  #lightBlue

capi-[#0000FF]>cardReader: <font color=blue>**Card #3**</font>\ntransmit card request\n\t- APDU list
activate cardReader #lightBlue

group Card APDU commands inside session
    cardReader->card: read record (last event)
    card-->cardReader: [last event data]
end

cardReader--[#0000FF]>capi: [last event data]
deactivate cardReader

capi-->app: [Calypso card image:\n\t- identification data\n\t- invalidation status\n\t- environment data\n\t- ratification status\n\t- last event data]
deactivate capi

app->app: **get** ticketing last event data\nfrom card image
app->app: anti-passback management\n& communication failure recovery

rnote right app #Thistle
️⚠️if (last event occurred shorter than the anti-pass delay)
&& (card status is ratified) → decline card transaction,
close channel & wait for card removal from reader

️⚠️if (last event occurred shorter than the anti-pass delay)
&& (card status is none-ratified) → manage recovery transaction
endrnote

app->capi: <font color=red>**prepare**</font> card transaction:\n\t- read contract list
activate capi  #lightBlue
capi-->app
deactivate capi

app->capi: <font color=red>**process**</font> commands (**keep** channel open)
activate capi  #lightBlue

capi-[#0000FF]>cardReader: <font color=blue>**Card #4**</font>\ntransmit card request\n\t- APDU list
activate cardReader #lightBlue

group Card APDU commands inside session
    cardReader->card: read record (contract list)
    card-->cardReader: [contract list data]
end

cardReader--[#0000FF]>capi: [contract list data]
deactivate cardReader

capi-->app: [Calypso card image:\n\t- identification data\n\t- invalidation status\n\t- environment data\n\t- ratification status\n\t- last event data\n\t- contract list data]
deactivate capi

app->app: identifies contract

app->capi: <font color=red>**prepare**</font> card transaction:\n\t- read contract #x
activate capi  #lightBlue
capi-->app
deactivate capi

app->capi: <font color=red>**process**</font> commands (**keep** channel open)
activate capi  #lightBlue

capi-[#0000FF]>cardReader: <font color=blue>**Card #5**</font>\ntransmit card request\n\t- APDU list
activate cardReader #lightBlue

group Card APDU commands inside session
    cardReader->card: read record (contract #x)
    card-->cardReader: [contract #x data]
end

cardReader--[#0000FF]>capi: [contract #x data]
deactivate cardReader

capi-->app: [Calypso card image:\n\t- identification data\n\t- invalidation status\n\t- environment data\n\t- ratification status\n\t- last event data\n\t- contract list data\n\t- contract #x data]
deactivate capi

app->app: identifies associated counter

app->capi: <font color=red>**prepare**</font> card transaction:\n\t- reader counter #x
activate capi  #lightBlue
capi-->app
deactivate capi

app->capi: <font color=red>**process**</font> commands (**keep** channel open)
activate capi  #lightBlue

capi-[#0000FF]>cardReader: <font color=blue>**Card #6**</font>\ntransmit card request\n\t- APDU list
activate cardReader #lightBlue

group Card APDU commands inside session
    cardReader->card: read record (counter #x)
    card-->cardReader: [counter #1 data]
end

cardReader--[#0000FF]>capi: [card challenge]
deactivate cardReader

capi-->app: [Calypso card image:\n\t- identification data\n\t- invalidation status\n\t- environment data\n\t- ratification status\n\t- last event data\n\t- contract list data\n\t- contract #x data\n\t- counter #x data]
deactivate capi

app->app: defines data to update

app->capi: <font color=red>**prepare**</font>:\n\t- decrease counter #x (new value)\n\t- append event record (new event)\n\t- close secure session (not ratified)
activate capi  #lightBlue

capi-->app
deactivate capi

app->capi: <font color=red>**process**</font> commands (**close** channel after)
activate capi  #lightBlue
capi->capi: anticipates the future card responses
note over capi
    If the current value of the counter #x were **unknown**, then the transmission of an additional card APDU
    message would be necessary to operate the decrease counter in a different message than the session closing.
end note

capi-[#00FF00]>samReader: <font color=green>**SAM #1**</font>\ntransmit card request\n\t- APDU list
activate samReader #lightGreen

note over samReader
    <:sunglasses:> All card session data managed within a single SAM command group.
end note

samReader->sam: select diversifier (card serial)
sam-->samReader
samReader->sam: digest init (opening data)
sam-->samReader
samReader->sam: digest update (read environment)
sam-->samReader
samReader->sam: digest update (last event)
sam-->samReader
samReader->sam: digest update (read contract list)
sam-->samReader
samReader->sam: digest update (read contract #x)
sam-->samReader
samReader->sam: digest update (read counters)
sam-->samReader
group <:sunglasses:> <font color=red>**anticipated**</font> Card APDU responses
    samReader->sam: digest update (decrease counter)
    sam-->samReader
    samReader->sam: digest update (append event record)
    sam-->samReader
end
samReader->sam: digest close
sam-->samReader: [SAM certificate]

samReader-[#00FF00]->capi: [SAM certificate]
deactivate samReader

capi-[#0000FF]>cardReader: <font color=blue>**Card #7**</font>\ntransmit card request\n\t- APDU list
activate cardReader #lightBlue

group Card APDU commands inside session
    cardReader->card: decrease counter (counter #1, value)
    rnote over card #Aquamarine
      data update is delayed
      in the volatile card's
      modification buffer
    endrnote
    card-->cardReader: [new counter value]
    cardReader->card: append record (event, data)
    rnote over card #Aquamarine
      data update is delayed
      in the volatile card's
      modification buffer
    endrnote
    card-->cardReader
end

cardReader->card: close secure session (SAM certificate,\n as **non-ratified**)
card->card: if the SAM certificate is authenticated,\ndata updates are commited atomically
    rnote over card #Aquamarine
      card data is updated
      modification buffer is emptied
    endrnote

hnote over card #PowderBlue
card in state:
**non-ratified**
endhnote
rnote left card #Thistle
⚠️ very short period during which a RF communication
loss could allow card data to be updated without the
terminal being able to get the card certificate
→ if this happens, a recovery transaction will need
to be managed afterward
endrnote
card-->cardReader: [card certificate]

note over cardReader
    <:sunglasses:> ratification command immediately performed after session closing
end note

cardReader->card: ratification command
hnote over card #PowderBlue
card in state:
**ratified**
endhnote
card-->cardReader: ack

cardReader-[#0000FF]->capi: [card certificate]
deactivate cardReader

hnote over cardReader #Orange
reader in state:
**Wait For Card Removal**
endhnote

== End of the contactless card transaction ==

capi-[#00FF00]>samReader: <font color=green>**SAM #2**</font>\ntransmit card request\n\t- APDU list
activate samReader #lightGreen
samReader->sam: digest authenticate (card certificate)
sam-->samReader: [authentication status]

samReader-[#00FF00]->capi: [authentification status]
deactivate samReader

capi-->app: [Calypso card image:\n\t- identification data\n\t- invalidation status\n\t- environment data\n\t- --ratification status--\n\t- last event data (updated)\n\t- contract list data\n\t- contract #x data\n\t- counter #x data (updated)]\nauthentification status
deactivate capi

app->app: card successfully authenticated <:champagne:>
app->? : notification & <size:18>**access granting**</size>

== End of the Access Control opertion ==

app->capi: **init** crypto context for next transaction
activate capi  #lightBlue

capi-[#00FF00]>samReader: <font color=green>**SAM #x'**</font>\ntransmit card request\n\t- APDU list
activate samReader #lightGreen
samReader->sam: get challenge
sam-->samReader: [SAM challenge]
samReader-[#00FF00]->capi: [SAM challenge]
deactivate samReader

capi-->app
deactivate capi

app->app: **wait** for card removal

deactivate card
destroy card
cardReader<[#Orange]-? : card **removal**  .  .  .  .  .

hnote over cardReader #Orange
reader in state:
**Wait For Card Insertion**
endhnote

cardReader-[#Orange]>rapi: **removal**

== ready for next card transaction ==

@enduml