@startuml

'skinparam ClassBorderColor #F1C40F
skinparam ClassBorderColor #D4AC0D
skinparam stereotypeABorderColor #A9DCDF
skinparam stereotypeIBorderColor #B4A7E5
skinparam stereotypeCBorderColor #ADD1B2
skinparam stereotypeEBorderColor #EB93DF
skinparam shadowing false

skinparam StateBorderColor #D4AC0D
skinparam ActivityBorderColor #D4AC0D

' Red
skinparam ClassBackgroundColor<<red>> #FDEDEC
skinparam ClassBorderColor<<red>> #E74C3C
hide <<red>> stereotype
' Purple
skinparam ClassBackgroundColor<<purple>> #F4ECF7
skinparam ClassBorderColor<<purple>> #8E44AD
hide <<purple>> stereotype
' blue
skinparam ClassBackgroundColor<<blue>> #EBF5FB
skinparam ClassBorderColor<<blue>> #3498DB
hide <<blue>> stereotype
' Green
skinparam ClassBackgroundColor<<green>> #EAFAF1
skinparam ClassBorderColor<<green>> #2ECC71
hide <<green>> stereotype

' Orange
skinparam ClassBackgroundColor<<orange>> #FDF2E9
skinparam ClassBorderColor<<orange>> #E67E22
hide <<orange>> stereotype

' Grey
skinparam ClassBackgroundColor<<grey>> #EAECEE
skinparam ClassBorderColor<<grey>> #2C3E50
hide <<grey>> stereotype

actor "Ticketing Application" as app #gold
participant "Calypso API" as capi #pink
participant "Reader API" as rapi #pink
participant "Calypso Card\nReader" as cardReader #lightBlue
boundary "**Card**" as card #lightBlue
participant "Calypso SAM\nReader" as samReader #lightGreen
boundary "selected\n**SAM**" as sam #lightGreen

activate app #gold
activate sam #lightGreen

== Card selection & identification ==

note over capi
    Reads the environment data present in all the cards targeted for selection.
end note

app->capi: <font color=red>**prepare**</font> card selection scenario:\n\t- filter by specific AID\n\t- read SV Load record\n\t- read SV Debit records
activate capi  #pink
capi-->app
deactivate capi

app->rapi: <font color=red>**process**</font> explicit card selection scenario
activate rapi  #pink
rapi-[#0000FF]>cardReader: <font color=blue>**Card #1**</font>\ntransmit selection request\n\t- card selector\n\t- APDU list
activate cardReader #lightBlue

cardReader->card: open card channel
activate card #lightBlue
card-->cardReader
cardReader->card: select application (aid)
card-->cardReader: [card FCI]
cardReader->cardReader: checks invalidation status

'group Card APDU commands outside secure session
    cardReader->card: read record (SV Load record)
    card-->cardReader: [SV Load record]
    cardReader->card: read record (SV Debit records)
    card-->cardReader: [SV Load records]
'end

cardReader--[#0000FF]>rapi: receive selection response
deactivate cardReader

rapi-->app: selected active SmartCard image
deactivate rapi

app->capi: **cast** Calypso card
activate capi  #pink
capi-->app: [Calypso card image:\n\t- identification data with SV support\n\t- SV Load data\n\t- SV Debit data\n\t- SV balance]

deactivate capi

== Card secure transaction ==

app->app: **instantiate** Calypso card transaction:\n\t- Calypso card resource\n\t- Calypso SAM resource

note over capi
    Reads again the Stored Value Load record to initiate a Stored Value transaction.
end note

app->capi: <font color=red>**prepare**</font> card transaction:\n\t- SV Get for Load
activate capi  #pink
note over capi
    SV Get for Debit prepared in **last** position of a card command set to process.
end note
capi-->app
deactivate capi

app->capi: <font color=red>**process**</font> commands
activate capi  #pink

capi-[#0000FF]>cardReader: <font color=blue>**Card #2**</font>\ntransmit card request\n\t- APDU list
activate cardReader #lightBlue

'group Card APDU commands inside session
    cardReader->card: SV Get (for Load)
    card-->cardReader: [SV Load record, SV Card challenge]
'end

cardReader--[#0000FF]>capi: [SV Card challenge]
deactivate cardReader

capi-->app: [Calypso card image:\n\t- identification data with SV support\n\t- SV Load data (updated)\n\t- SV Debit data\n\t- SV balance (updated)]
deactivate capi

app->capi: <font color=red>**prepare**</font> card transaction:\n\t- SV Load (specific amount)\n\t- release channel
activate capi  #pink
note over capi
    SV Debit prepared in **first** position of a card command set to process.
end note
capi-->app
deactivate capi

app->capi: <font color=red>**process**</font> commands
activate capi  #pink

capi-[#00FF00]>samReader: <font color=green>**SAM #1**</font>\ntransmit card request\n\t- APDU list
activate samReader #lightGreen

samReader->sam: select diversifier (card serial)
sam-->samReader
samReader->sam: SV prepare Load (SV card challenge, load amount)
sam-->samReader: [SV SAM challenge, SV SAM certificate]

samReader-[#00FF00]->capi: [SAM challenge, SAM certificate]
deactivate samReader

capi-[#0000FF]>cardReader: <font color=blue>**Card #3**</font>\ntransmit card request\n\t- APDU list
activate cardReader #lightBlue

'group Card APDU commands inside session
note over cardReader
    SV Debit follows **directely** a previously transmitted SV Get for Debit card command.
end note
    cardReader->card: SV Load (amount, SAM challenge, SAM certificate)
    card-->cardReader: [new balance, SV Card certificate]
'end

cardReader->card: close card channel
card-->cardReader
deactivate card

cardReader-[#0000FF]->capi: [card certificate]
deactivate cardReader

capi-[#00FF00]>samReader: <font color=green>**SAM #2**</font>\ntransmit card request\n\t- APDU list
activate samReader #lightGreen
samReader->sam: SV Check (card certificate)
sam-->samReader: [authentication status]

samReader-[#00FF00]->capi: [authentification status]
deactivate samReader

capi-->app: [Calypso card image:\n\t- identification data with SV support\n\t- SV Load data (updated)\n\t- SV Debit data\n\t- SV balance (updated)]\nauthentification status
deactivate capi
@enduml