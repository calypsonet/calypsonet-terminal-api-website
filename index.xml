<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Calypso Networks Association Terminal APIs</title><link>https://terminal-api.calypsonet.org/</link><atom:link href="https://terminal-api.calypsonet.org/index.xml" rel="self" type="application/rss+xml"/><description>Calypso Networks Association Terminal APIs</description><generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2022 Calypso Networks Association. All Rights Reserved.</copyright><image><url>https://terminal-api.calypsonet.org/media/logo.svg</url><title>Calypso Networks Association Terminal APIs</title><link>https://terminal-api.calypsonet.org/</link></image><item><title>Calypsonet Terminal Reader API</title><link>https://terminal-api.calypsonet.org/apis/calypsonet-terminal-reader-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://terminal-api.calypsonet.org/apis/calypsonet-terminal-reader-api/</guid><description>&lt;hr>
&lt;p>The &lt;strong>Calypsonet Terminal Reader API&lt;/strong> defines the public elements shared by the reader.&lt;/p>
&lt;hr>
&lt;h2 id="interfaces">Interfaces&lt;/h2>
&lt;p>The reader API is a high-level interface used by terminal applications to operate smart card readers, it:&lt;/p>
&lt;ul>
&lt;li>
&lt;p>provides the means to identify card readers and verify the presence of smart cards.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>offers the possibility to configure the observation of readers in order to be notified on card insertion or withdrawal.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>is the entry point to manage the selection of a smart card in a specific reader.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://calypsonet.github.io/calypsonet-terminal-reader-java-api/1.0.1-SNAPSHOT/api_class_diagram.svg" alt="Reader API - class diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;h3 id="reader-identification">Reader identification&lt;/h3>
&lt;p>Any smart card reader entity should be accessible through an implementation of the ‘CardReader’ interface. Each is defined with a specific name. A reader could be designed to operate contactless card or a contact card. Finally, this interface can inform about the presence of a card in the reader.&lt;/p>
&lt;h3 id="configurablecardreader">ConfigurableCardReader&lt;/h3>
&lt;p>A reader with the capability to configure the communication protocols with smart card (contactless or contact) could implement the ConfigurableCardReader interface to activate or deactivate some communication protocols.&lt;/p>
&lt;h3 id="reader-observation">Reader observation&lt;/h3>
&lt;p>If a reader has the ability to dynamically detect changes on the card presence, then it can also implement the interface ObservableCardReader.&lt;/p>
&lt;p>Observers implementing the CardReaderObserverSpi could be declared to an observable card reader to be notified on specific CardReaderEvent: card insertion, card selection (matched), or card removal.&lt;/p>
&lt;h3 id="card-selection">Card Selection&lt;/h3>
&lt;p>The CardSelectionManager provides the possibility to « prepare a request that could contain one or several card application selections.&lt;/p>
&lt;p>The CardSelection SPI interface could be extended by the API of a specific smart card solution to improve the selection request with settings specific to the smart card solution.&lt;/p>
&lt;p>Through the card selection manager, the prepared card selections could be managed in&lt;/p>
&lt;ul>
&lt;li>
&lt;p>&lt;strong>synchronously&lt;/strong>: processed directly on a specific card reader on which a card is already present,&lt;/p>
&lt;/li>
&lt;li>
&lt;p>or &lt;strong>asynchronously&lt;/strong>: scheduled on a specific observable reader in order to be operated dynamically in case of card insertion detection.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;p>If several card selections are prepared, the card selection manager operate the card selection in the order of preparation. By default, the card selection manager stops the card selection processing on the first successful card selection, and the logical channel is kept open.&lt;/p>
&lt;ul>
&lt;li>
&lt;p>In case the multiple selection mode is activated during the preparation, the card selection manager tries to operate ‘all’ the prepared selections, even if one or several of them are successful. If the last selection is successful, the logical channel could be kept open with the last selected application.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>during the card selection preparation, it could also be explicitly requested to to close the logical channel after the card selection.&lt;/p>
&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h2 id="card-selection-modes">Card selection modes&lt;/h2>
&lt;p>Depending on the card transaction use case, or on the reader capability, there are two ways to manage the selection of a card:&lt;/p>
&lt;ul>
&lt;li>Either synchronously on a simple reader, a selection could be operated directly by transmitting the card selection scenario. In this case the same entity manages both the card selection and the card processing.&lt;/li>
&lt;li>Otherwise asynchronously on an observable reader, a scheduled card selection could be defined. In this case the card selection is operated automatically at the insertion of the card. In this case, the card selection is next managed by the observable reader, but the card processing is managed by a reader observer.&lt;/li>
&lt;/ul>
&lt;!--
![Card selection modes - sequence diagram](https://keyple.org/media/learn/keyple-in-depth/card_selection_modes_activity_diagram.svg)
-->
&lt;figure id="figure-reader-api---card-selection-modes---activity-diagram">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./media/apis/reader_management_card_selection_modes_activity_diagram.svg" alt="Reader API - Card Selection Modes - Activity Diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Reader API - Card Selection Modes - Activity Diagram
&lt;/figcaption>&lt;/figure>
&lt;hr>
&lt;h2 id="observable-reader-states">Observable reader states&lt;/h2>
&lt;p>An observable reader is active only when at least one reader observer is registered, and if the start of the detection has been requested.
When active, an observable reader could switch between three internal states:&lt;/p>
&lt;ul>
&lt;li>Wait for card insertion&lt;/li>
&lt;li>Wait for card processing&lt;/li>
&lt;li>Wait for card removal&lt;/li>
&lt;/ul>
&lt;p>In the nominal case, a reader observer indicates to the observable reader that the processing of the card is finished by releasing the card channel.
To manage a failure of the reader observer process, the observable reader interface provides also a method to finalize the card processing.&lt;/p>
&lt;!--
![Observable Reader - states diagram](https://keyple.org/media/learn/keyple-in-depth/reader_observation_state_machine.svg)
-->
&lt;figure id="figure-reader-api---observable-reader-states---activity-diagram">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./media/apis/reader_management_reader_observation_state_diagram.svg" alt="Reader API - Observable Reader States - Activity Diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Reader API - Observable Reader States - Activity Diagram
&lt;/figcaption>&lt;/figure>
&lt;p>The states could be switched:&lt;/p>
&lt;ul>
&lt;li>due to an explicit API request (blue arrows):
&lt;ul>
&lt;li>the release of the card channel,&lt;/li>
&lt;li>the call of an observable reader method:
&lt;ul>
&lt;li>the addition or the remove of an observable reader,&lt;/li>
&lt;li>a request to start or stop the detection, to finalize the card processing.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Or because of an external event (red arrows), the insertion or the remove of a card.
&lt;ul>
&lt;li>the insertion of a card causing the observable reader to notify a &lt;code>CARD_MATCHED&lt;/code> reader event (in case of successful scheduled selection) or a &lt;code>CARD_INSERTED&lt;/code> reader event (notification mode defined as &lt;code>ALWAYS&lt;/code>).&lt;/li>
&lt;li>the removal of a card causing the observable reader to notify a &lt;code>CARD_REMOVED&lt;/code> reader event.&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>If a card detection is started with the &lt;code>REPEATING&lt;/code> detection mode, then later when the card is removed, the reader starts again the detection of a new card.&lt;/p>
&lt;p>Notification of card removal during the card removal wait state is a feature of any observable reader.
However, some observable readers may additionally have the ability to notify removal during the card processing state.&lt;/p>
&lt;hr>
&lt;h2 id="limitations--constraints">Limitations &amp;amp; constraints&lt;/h2>
&lt;p>On a specific card reader, the Reader API allows to address only a &lt;strong>single logical channel&lt;/strong>.&lt;/p>
&lt;hr>
&lt;h1 id="heading">&lt;/h1>
&lt;h2 id="implementations--api-documentation">Implementations &amp;amp; API Documentation&lt;/h2>
&lt;div class="alert alert-note">
&lt;div>
The third version number (x.y.&lt;strong>z&lt;/strong>) only concerns updates of the javadoc because this component does not contain any implementation, but only an API.
Therefore, it is recommended to always perform a &lt;strong>dynamic import&lt;/strong> as described above in order to have the most up-to-date documentation.
&lt;/div>
&lt;/div>
&lt;h3 id="reader-api-in-java">Reader API in Java&lt;/h3>
&lt;div class="alert alert-note">
&lt;div>
&lt;strong>&lt;code>1.0.0&lt;/code>&lt;/strong>
&lt;span class="component-metadata">
&lt;i class="fas fa-book pr-1 fa-fw">&lt;/i> &lt;a href="https://calypsonet.github.io/calypsonet-terminal-reader-java-api/">API documentation&lt;/a>&lt;/span>
&lt;span class="component-metadata">
&lt;i class="fab fa-github pr-1 fa-fw">&lt;/i> &lt;a href="https://github.com/calypsonet/calypsonet-terminal-reader-java-api/">GitHub repository&lt;/a>&lt;/span>
&lt;span class="component-metadata">
&lt;i class="fas fa-exchange-alt pr-1 fa-fw">&lt;/i> &lt;a href="https://github.com/calypsonet/calypsonet-terminal-reader-java-api/blob/main/CHANGELOG.md">Changelog&lt;/a>&lt;/span>
&lt;/div>
&lt;/div>
&lt;p>All deliverables are available directly from the &lt;a href="https://search.maven.org/search?q=a:calypsonet-terminal-reader-java-api" target="_blank" rel="noopener">Maven Central Repository&lt;/a> or by using one of the project resource managers below:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-4" role="tablist">&lt;li class="nav-item">
&lt;a class="nav-link active tab-Gradle-Groovy"
id="tabs-4-0-tab" data-toggle="tab" href="#tabs-4-0" role="tab" onclick="handleClick(&amp;#34;Gradle-Groovy&amp;#34;);"
aria-controls="tabs-4-0" aria-selected="true">
Gradle Groovy
&lt;/a>
&lt;/li>&lt;li class="nav-item">
&lt;a class="nav-link tab-Gradle-Kotlin"
id="tabs-4-1-tab" data-toggle="tab" href="#tabs-4-1" role="tab" onclick="handleClick(&amp;#34;Gradle-Kotlin&amp;#34;);"
aria-controls="tabs-4-1" aria-selected="false">
Gradle Kotlin
&lt;/a>
&lt;/li>&lt;li class="nav-item">
&lt;a class="nav-link tab-Maven"
id="tabs-4-2-tab" data-toggle="tab" href="#tabs-4-2" role="tab" onclick="handleClick(&amp;#34;Maven&amp;#34;);"
aria-controls="tabs-4-2" aria-selected="false">
Maven
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyTabContentToClipboard('tabs-4', this);">Copy&lt;/button>&lt;/div>
&lt;div class="tab-content" id="tabs-4-content">&lt;div class="tab-pane fade show active"
id="tabs-4-0" role="tabpanel" aria-labelled-by="tabs-4-0-tab">
&lt;pre>&lt;code class="language-gradle">implementation &amp;#39;org.calypsonet.terminal:calypsonet-terminal-reader-java-api:1.0.&amp;#43;&amp;#39;&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="tab-pane fade"
id="tabs-4-1" role="tabpanel" aria-labelled-by="tabs-4-1-tab">
&lt;pre>&lt;code class="language-kotlin">implementation(&amp;#34;org.calypsonet.terminal:calypsonet-terminal-reader-java-api:1.0.&amp;#43;&amp;#34;)&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="tab-pane fade"
id="tabs-4-2" role="tabpanel" aria-labelled-by="tabs-4-2-tab">
&lt;pre>&lt;code class="language-xml">&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.calypsonet.terminal&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;calypsonet-terminal-reader-java-api&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;[1.0.0,1.1.0)&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;h3 id="reader-api-in-c">Reader API in C++&lt;/h3>
&lt;div class="alert alert-note">
&lt;div>
&lt;strong>&lt;code>1.0.0&lt;/code>&lt;/strong>
&lt;span class="component-metadata">
&lt;i class="fas fa-book pr-1 fa-fw">&lt;/i> &lt;a href="https://calypsonet.github.io/calypsonet-terminal-reader-cpp-api/">API documentation&lt;/a>&lt;/span>
&lt;span class="component-metadata">
&lt;i class="fab fa-github pr-1 fa-fw">&lt;/i> &lt;a href="https://github.com/calypsonet/calypsonet-terminal-reader-cpp-api/">GitHub repository&lt;/a>&lt;/span>
&lt;/div>
&lt;/div></description></item><item><title>Calypsonet Terminal Card API</title><link>https://terminal-api.calypsonet.org/apis/calypsonet-terminal-card-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://terminal-api.calypsonet.org/apis/calypsonet-terminal-card-api/</guid><description>&lt;hr>
&lt;p>The &lt;strong>Calypsonet Terminal Card API&lt;/strong> defines the internal elements shared by the reader layer to implement specific card layers (like the Calypso Card layer).&lt;/p>
&lt;hr>
&lt;h2 id="interfaces">Interfaces&lt;/h2>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://calypsonet.github.io/calypsonet-terminal-card-java-api/1.0.1-SNAPSHOT/api_class_diagram.svg" alt="Card API - class diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;hr>
&lt;h2 id="limitations--constraints">Limitations &amp;amp; constraints&lt;/h2>
&lt;p>The Card API doesn&amp;rsquo;t allow to request the transmission to a card of the APDU commands &amp;ldquo;Select Application by DF Name&amp;rdquo; or &amp;ldquo;Get Response&amp;rdquo;:&lt;/p>
&lt;ul>
&lt;li>the selection of a specific card application could be managed only through a Card Selection Request.&lt;/li>
&lt;li>the APDU response status words 61XYh &amp;amp; 6CXYh are automatically handled by the reader layer library by issuing a Get Response or by re-issuing the previous command with the rigth &amp;lsquo;Le&amp;rsquo; field.&lt;/li>
&lt;/ul>
&lt;hr>
&lt;h1 id="heading">&lt;/h1>
&lt;h2 id="implementations--api-documentation">Implementations &amp;amp; API Documentation&lt;/h2>
&lt;div class="alert alert-note">
&lt;div>
The third version number (x.y.&lt;strong>z&lt;/strong>) only concerns updates of the javadoc because this component does not contain any implementation, but only an API.
Therefore, it is recommended to always perform a &lt;strong>dynamic import&lt;/strong> as described above in order to have the most up-to-date documentation.
&lt;/div>
&lt;/div>
&lt;h3 id="card-api-in-java">Card API in Java&lt;/h3>
&lt;div class="alert alert-note">
&lt;div>
&lt;strong>&lt;code>1.0.0&lt;/code>&lt;/strong>
&lt;span class="component-metadata">
&lt;i class="fas fa-book pr-1 fa-fw">&lt;/i> &lt;a href="https://calypsonet.github.io/calypsonet-terminal-card-java-api/">API documentation&lt;/a>&lt;/span>
&lt;span class="component-metadata">
&lt;i class="fab fa-github pr-1 fa-fw">&lt;/i> &lt;a href="https://github.com/calypsonet/calypsonet-terminal-card-java-api/">GitHub repository&lt;/a>&lt;/span>
&lt;span class="component-metadata">
&lt;i class="fas fa-exchange-alt pr-1 fa-fw">&lt;/i> &lt;a href="https://github.com/calypsonet/calypsonet-terminal-card-java-api/blob/main/CHANGELOG.md">Changelog&lt;/a>&lt;/span>
&lt;/div>
&lt;/div>
&lt;p>All deliverables are available directly from the &lt;a href="https://search.maven.org/search?q=a:calypsonet-terminal-card-java-api" target="_blank" rel="noopener">Maven Central Repository&lt;/a> or by using one of the project resource managers below:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-2" role="tablist">&lt;li class="nav-item">
&lt;a class="nav-link active tab-Gradle-Groovy"
id="tabs-2-0-tab" data-toggle="tab" href="#tabs-2-0" role="tab" onclick="handleClick(&amp;#34;Gradle-Groovy&amp;#34;);"
aria-controls="tabs-2-0" aria-selected="true">
Gradle Groovy
&lt;/a>
&lt;/li>&lt;li class="nav-item">
&lt;a class="nav-link tab-Gradle-Kotlin"
id="tabs-2-1-tab" data-toggle="tab" href="#tabs-2-1" role="tab" onclick="handleClick(&amp;#34;Gradle-Kotlin&amp;#34;);"
aria-controls="tabs-2-1" aria-selected="false">
Gradle Kotlin
&lt;/a>
&lt;/li>&lt;li class="nav-item">
&lt;a class="nav-link tab-Maven"
id="tabs-2-2-tab" data-toggle="tab" href="#tabs-2-2" role="tab" onclick="handleClick(&amp;#34;Maven&amp;#34;);"
aria-controls="tabs-2-2" aria-selected="false">
Maven
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyTabContentToClipboard('tabs-2', this);">Copy&lt;/button>&lt;/div>
&lt;div class="tab-content" id="tabs-2-content">&lt;div class="tab-pane fade show active"
id="tabs-2-0" role="tabpanel" aria-labelled-by="tabs-2-0-tab">
&lt;pre>&lt;code class="language-gradle">implementation &amp;#39;org.calypsonet.terminal:calypsonet-terminal-card-java-api:1.0.&amp;#43;&amp;#39;&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="tab-pane fade"
id="tabs-2-1" role="tabpanel" aria-labelled-by="tabs-2-1-tab">
&lt;pre>&lt;code class="language-kotlin">implementation(&amp;#34;org.calypsonet.terminal:calypsonet-terminal-card-java-api:1.0.&amp;#43;&amp;#34;)&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="tab-pane fade"
id="tabs-2-2" role="tabpanel" aria-labelled-by="tabs-2-2-tab">
&lt;pre>&lt;code class="language-xml">&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.calypsonet.terminal&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;calypsonet-terminal-card-java-api&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;[1.0.0,1.1.0)&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;h3 id="card-api-in-c">Card API in C++&lt;/h3>
&lt;div class="alert alert-note">
&lt;div>
&lt;strong>&lt;code>1.0.0&lt;/code>&lt;/strong>
&lt;span class="component-metadata">
&lt;i class="fas fa-book pr-1 fa-fw">&lt;/i> &lt;a href="https://calypsonet.github.io/calypsonet-terminal-card-cpp-api/">API documentation&lt;/a>&lt;/span>
&lt;span class="component-metadata">
&lt;i class="fab fa-github pr-1 fa-fw">&lt;/i> &lt;a href="https://github.com/calypsonet/calypsonet-terminal-card-cpp-api/">GitHub repository&lt;/a>&lt;/span>
&lt;/div>
&lt;/div></description></item><item><title>Calypsonet Terminal Calypso API</title><link>https://terminal-api.calypsonet.org/apis/calypsonet-terminal-calypso-api/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://terminal-api.calypsonet.org/apis/calypsonet-terminal-calypso-api/</guid><description>&lt;hr>
&lt;p>The &lt;strong>Calypsonet Terminal Calypso API&lt;/strong> is an extension of the &lt;strong>Calypsonet Terminal Reader API&lt;/strong> which provides a high-level API standardizing the way to interact with a Calypso® product (card, NFC smartphone applet/application, SAM, etc&amp;hellip;).&lt;/p>
&lt;hr>
&lt;h2 id="interfaces">Interfaces&lt;/h2>
&lt;p>The Calypso API provides the means to select a target card or SAM and then perform a transaction with the selected target.&lt;/p>
&lt;ul>
&lt;li>The result of a card selection is a smartcard image whose file structure and data records can be browsed.&lt;/li>
&lt;li>The result of a SAM selection is a smartcard image whose keys' parameters can be read.&lt;/li>
&lt;li>A transaction with a target card or SAM may involve a master SAM in order to secure the operations.&lt;/li>
&lt;/ul>
&lt;p>The CalypsoCard &amp;amp; CalypsoSam interfaces provide ‘&lt;strong>getters&lt;/strong>’ in order to recover the information of the selected smartcard.&lt;/p>
&lt;p>To optimize the number of exchanges with a card reader of a SAM reader, the Calypso API allows to group the commands. A set of command could be first &amp;lsquo;&lt;strong>prepare&lt;/strong>d&amp;rsquo;, and then be &amp;lsquo;&lt;strong>process&lt;/strong>ed&amp;rsquo; by a selected target at the selection or during the transaction.
A transaction with a Calypso PO is fully managed through the PoTransaction object:&lt;/p>
&lt;p>
&lt;figure >
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="https://calypsonet.github.io/calypsonet-terminal-calypso-java-api/1.2.0/api_class_diagram.svg" alt="Calypso API - class diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;/figure>
&lt;/p>
&lt;hr>
&lt;h2 id="selection-of-a-calypso-card">Selection of a Calypso card&lt;/h2>
&lt;p>A Calypso card selection could be defined to accept or not invalidated card.&lt;/p>
&lt;p>Through the selection only basic Select File (without changing DF) or Read Records commands could joined: the goal is to recover in the selection result some file status or record data of elements present in all cards of a ticketing networks.
The type of card product has not yet been identified, the commands are prepared to be supported by all types of card products: Prime, Ligth, or Regular.&lt;/p>
&lt;p>Then if a Calypso card has matched the selection request, a Calypso card image is returned, some file headers or file records could be filled depending on the information recovered in the responses of the Select File or Read Records processed.&lt;/p>
&lt;hr>
&lt;h2 id="transaction-with-a-calypso-card">Transaction with a Calypso card&lt;/h2>
&lt;p>Except the operations involving secure processing on &amp;ldquo;data&amp;rdquo; (data signature computation / verification, data ciphering / unciphering), only commands for the card need to be prepared though the Card Transaction Manager interface.
Depending on the operation, if necessary the security involving the master SAM must be controlled internally by the Calypso library.&lt;/p>
&lt;h3 id="simple-operation-outside-a-session">Simple operation outside a session&lt;/h3>
&lt;h3 id="pin-plain-verification--change-outside-a-session">PIN plain verification / change outside a session&lt;/h3>
&lt;figure id="figure-calypso-api---verify--change-plain-pin---sequence-diagram">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./media/apis/calypso_transaction_Verify_Change_Plain_PIN_sequence_diagram.svg" alt="Calypso API - Verify / Change Plain PIN - Sequence Diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Calypso API - Verify / Change Plain PIN - Sequence Diagram
&lt;/figcaption>&lt;/figure>
&lt;h3 id="data-secure-processing-outside-a-session">Data secure processing outside a session&lt;/h3>
&lt;figure id="figure-calypso-api---data-secure-processing-outside-a-session---sequence-diagram">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./media/apis/calypso_transaction_DSP_outside_session_sequence_diagram.svg" alt="Calypso API - Data secure processing outside a session - Sequence Diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Calypso API - Data secure processing outside a session - Sequence Diagram
&lt;/figcaption>&lt;/figure>
&lt;h3 id="key--pin-ciphered-update-outside-a-session">Key / PIN ciphered update outside a session&lt;/h3>
&lt;figure id="figure-calypso-api---change-key--ciphered-pin-outside-a-session---sequence-diagram">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./media/apis/calypso_transaction_Change_Key_Ciphered_PIN_sequence_diagram.svg" alt="Calypso API - Change Key / Ciphered PIN outside a session - Sequence Diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Calypso API - Change Key / Ciphered PIN outside a session - Sequence Diagram
&lt;/figcaption>&lt;/figure>
&lt;h3 id="stored-value-operation-outside-a-session">Stored Value operation outside a session&lt;/h3>
&lt;figure id="figure-calypso-api---standalone-stored-value-transaction---sequence-diagram">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./media/apis/calypso_transaction_standalone_SV_operation_sequence_diagram.svg" alt="Calypso API - standalone Stored Value transaction - Sequence Diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Calypso API - standalone Stored Value transaction - Sequence Diagram
&lt;/figcaption>&lt;/figure>
&lt;h3 id="simple-secure-session-for-fast-embedded-performance">Simple secure session for fast embedded performance&lt;/h3>
&lt;p>This example illustrates the ticketing processing of a validation: only the necessary data is read from the card.&lt;/p>
&lt;p>In case of communication failure with the card, to support a recovery transaction on another terminal: the ratification status and the last event are checked at the session opening, and the session is closed as not ratified directly followed by a ratification command.&lt;/p>
&lt;figure id="figure-calypso-api---simple-secure-session---sequence-diagram">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./media/apis/calypso_transaction_simple_secure_session_embedded_sequence_diagram.svg" alt="Calypso API - Simple Secure Session - Sequence Diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Calypso API - Simple Secure Session - Sequence Diagram
&lt;/figcaption>&lt;/figure>
&lt;h3 id="simple-secure-session-for-an-efficient-distributed-system">Simple secure session for an efficient distributed system&lt;/h3>
&lt;p>In most of the cases, it should be possible to handle a secure session with a Calypso card, using only:&lt;/p>
&lt;ul>
&lt;li>3 exchanges with the card reader (selection processing, session opening processing, and session closing processing),&lt;/li>
&lt;li>and 3 exchanges with the SAM reader (terminal session challenge recovery, session MAC computation, and card authentication).&lt;/li>
&lt;/ul>
&lt;p>This example shows the loading of a contract during a sale, to speed up the identification of the card content while limiting the exchange of messages with the card reader, some data can be read out of session during the selection, then read again during the session.&lt;/p>
&lt;p>In case of communication failure with the card, if the recovery transaction is supported only on the same terminal, then the checking of the ratification status is not necessary at the session opening, and the session could be closed as ratified.&lt;/p>
&lt;figure id="figure-calypso-api---simple-secure-session---sequence-diagram">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./media/apis/calypso_transaction_simple_secure_session_distributed_sequence_diagram.svg" alt="Calypso API - Simple Secure Session - Sequence Diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Calypso API - Simple Secure Session - Sequence Diagram
&lt;/figcaption>&lt;/figure>
&lt;h3 id="pin-ciphered-verification-inside-a-session">PIN ciphered verification inside a session&lt;/h3>
&lt;figure id="figure-calypso-api---verify-ciphered-pin-inside-a-session---sequence-diagram">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./media/apis/calypso_transaction_Verify_Ciphered_PIN_inside_session_sequence_diagram.svg" alt="Calypso API - Verify Ciphered PIN inside a session - Sequence Diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Calypso API - Verify Ciphered PIN inside a session - Sequence Diagram
&lt;/figcaption>&lt;/figure>
&lt;h3 id="data-secure-processing-inside-a-session">Data secure processing inside a session&lt;/h3>
&lt;figure id="figure-calypso-api---data-secure-processing-inside-a-session---sequence-diagram">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./media/apis/calypso_transaction_DSP_inside_session_sequence_diagram.svg" alt="Calypso API - Data secure processing inside a session - Sequence Diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Calypso API - Data secure processing inside a session - Sequence Diagram
&lt;/figcaption>&lt;/figure>
&lt;h3 id="stored-value-operation-inside-a-session">Stored Value operation inside a session&lt;/h3>
&lt;figure id="figure-calypso-api---stored-value-transaction-inside-a-secure-session---sequence-diagram">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./media/apis/calypso_transaction_SV_inside_session_sequence_diagram.svg" alt="Calypso API - Stored Value transaction inside a secure session - Sequence Diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Calypso API - Stored Value transaction inside a secure session - Sequence Diagram
&lt;/figcaption>&lt;/figure>
&lt;h3 id="multiple-secure-sessions">Multiple secure sessions&lt;/h3>
&lt;figure id="figure-calypso-api---multiple-secure-session---sequence-diagram">
&lt;div class="d-flex justify-content-center">
&lt;div class="w-100" >&lt;img src="./media/apis/calypso_transaction_multiple_secure_session_sequence_diagram.svg" alt="Calypso API - Multiple secure session - Sequence Diagram" loading="lazy" data-zoomable />&lt;/div>
&lt;/div>&lt;figcaption>
Calypso API - Multiple secure session - Sequence Diagram
&lt;/figcaption>&lt;/figure>
&lt;hr>
&lt;h2 id="selection-of-a-calypso-sam">Selection of a Calypso SAM&lt;/h2>
&lt;hr>
&lt;h2 id="transaction-with-a-calypso-sam">Transaction with a Calypso SAM&lt;/h2>
&lt;hr>
&lt;h1 id="heading">&lt;/h1>
&lt;h2 id="implementations--api-documentation">Implementations &amp;amp; API Documentation&lt;/h2>
&lt;div class="alert alert-note">
&lt;div>
The third version number (x.y.&lt;strong>z&lt;/strong>) only concerns updates of the javadoc because this component does not contain any implementation, but only an API.
Therefore, it is recommended to always perform a &lt;strong>dynamic import&lt;/strong> as described above in order to have the most up-to-date documentation.
&lt;/div>
&lt;/div>
&lt;h3 id="calypso-api-in-java">Calypso API in Java&lt;/h3>
&lt;div class="alert alert-note">
&lt;div>
&lt;strong>&lt;code>1.3.0&lt;/code>&lt;/strong>
&lt;span class="component-metadata">
&lt;i class="fas fa-book pr-1 fa-fw">&lt;/i> &lt;a href="https://calypsonet.github.io/calypsonet-terminal-calypso-java-api/">API documentation&lt;/a>&lt;/span>
&lt;span class="component-metadata">
&lt;i class="fab fa-github pr-1 fa-fw">&lt;/i> &lt;a href="https://github.com/calypsonet/calypsonet-terminal-calypso-java-api/">GitHub repository&lt;/a>&lt;/span>
&lt;span class="component-metadata">
&lt;i class="fas fa-exchange-alt pr-1 fa-fw">&lt;/i> &lt;a href="https://github.com/calypsonet/calypsonet-terminal-calypso-java-api/blob/main/CHANGELOG.md">Changelog&lt;/a>&lt;/span>
&lt;/div>
&lt;/div>
&lt;p>All deliverables are available directly from the &lt;a href="https://search.maven.org/search?q=a:calypsonet-terminal-calypso-java-api" target="_blank" rel="noopener">Maven Central Repository&lt;/a> or by using one of the project resource managers below:&lt;/p>
&lt;ul class="nav nav-tabs" id="tabs-12" role="tablist">&lt;li class="nav-item">
&lt;a class="nav-link active tab-Gradle-Groovy"
id="tabs-12-0-tab" data-toggle="tab" href="#tabs-12-0" role="tab" onclick="handleClick(&amp;#34;Gradle-Groovy&amp;#34;);"
aria-controls="tabs-12-0" aria-selected="true">
Gradle Groovy
&lt;/a>
&lt;/li>&lt;li class="nav-item">
&lt;a class="nav-link tab-Gradle-Kotlin"
id="tabs-12-1-tab" data-toggle="tab" href="#tabs-12-1" role="tab" onclick="handleClick(&amp;#34;Gradle-Kotlin&amp;#34;);"
aria-controls="tabs-12-1" aria-selected="false">
Gradle Kotlin
&lt;/a>
&lt;/li>&lt;li class="nav-item">
&lt;a class="nav-link tab-Maven"
id="tabs-12-2-tab" data-toggle="tab" href="#tabs-12-2" role="tab" onclick="handleClick(&amp;#34;Maven&amp;#34;);"
aria-controls="tabs-12-2" aria-selected="false">
Maven
&lt;/a>
&lt;/li>&lt;/ul>
&lt;div class="bd-clipboard">&lt;button type="button" class="btn btn-clipboard btn-outline-light" title="Copy to clipboard" onClick="javascript:copyTabContentToClipboard('tabs-12', this);">Copy&lt;/button>&lt;/div>
&lt;div class="tab-content" id="tabs-12-content">&lt;div class="tab-pane fade show active"
id="tabs-12-0" role="tabpanel" aria-labelled-by="tabs-12-0-tab">
&lt;pre>&lt;code class="language-gradle">implementation &amp;#39;org.calypsonet.terminal:calypsonet-terminal-calypso-java-api:1.3.&amp;#43;&amp;#39;&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="tab-pane fade"
id="tabs-12-1" role="tabpanel" aria-labelled-by="tabs-12-1-tab">
&lt;pre>&lt;code class="language-kotlin">implementation(&amp;#34;org.calypsonet.terminal:calypsonet-terminal-calypso-java-api:1.3.&amp;#43;&amp;#34;)&lt;/code>&lt;/pre>
&lt;/div>
&lt;div class="tab-pane fade"
id="tabs-12-2" role="tabpanel" aria-labelled-by="tabs-12-2-tab">
&lt;pre>&lt;code class="language-xml">&amp;lt;dependency&amp;gt;
&amp;lt;groupId&amp;gt;org.calypsonet.terminal&amp;lt;/groupId&amp;gt;
&amp;lt;artifactId&amp;gt;calypsonet-terminal-calypso-java-api&amp;lt;/artifactId&amp;gt;
&amp;lt;version&amp;gt;[1.3.0,1.4.0)&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/code>&lt;/pre>
&lt;/div>
&lt;/div>
&lt;h3 id="calypso-api-in-c">Calypso API in C++&lt;/h3>
&lt;div class="alert alert-note">
&lt;div>
&lt;strong>&lt;code>1.1.0&lt;/code>&lt;/strong>
&lt;span class="component-metadata">
&lt;i class="fas fa-book pr-1 fa-fw">&lt;/i> &lt;a href="https://calypsonet.github.io/calypsonet-terminal-calypso-cpp-api/">API documentation&lt;/a>&lt;/span>
&lt;span class="component-metadata">
&lt;i class="fab fa-github pr-1 fa-fw">&lt;/i> &lt;a href="https://github.com/calypsonet/calypsonet-terminal-calypso-cpp-api/">GitHub repository&lt;/a>&lt;/span>
&lt;/div>
&lt;/div></description></item></channel></rss>