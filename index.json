[{"authors":null,"categories":null,"content":"Release procedure  Create a branch dedicated to the current release. Check gradle.properties file:  Check the consistency of the version.   Check build.gradle.kts file:  Use only released dependencies. Upgrade Keyple dependencies to their latest released versions.   Update CHANGELOG.md file:  Verify the consistency of the Unreleased section. Move content of Unreleased section to a new \u0026ldquo;release\u0026rdquo; section. Update bottom links.   Build and test the component. Commit the modified files using if possible the commit message Release x.y.z. Push and create a pull request to merge the branch into main. Await the success of the build by the CI. Squash and merge the pull request. Await the success of the build by the CI. Create a release on GitHub:  Set tag x.y.z Set release name x.y.z Set the content by copying/pasting the content of the current release description in the CHANGELOG.md file without the bottom links.   Await the success of the build by the CI. Connect to Nexus Repository Manager of Calypsonet and go to \u0026ldquo;Staging Repositories\u0026rdquo; page:  Select the correct folder to Close \u0026amp; Release. It must contain the manifests, the JAR and all the others elements (sources, javadoc). Close the folder. Release the folder. The other unwanted folders could be dropped.   Check the availability of the release on the Maven Repository. This step may take from 10 minutes to 2 hours. Update this website:  Update version in params.yaml file. Update others elements if needed. Commit and push the modifications.    ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1639758865,"objectID":"be8ec78af1ceb94560f6fb17d4ec6af9","permalink":"https://terminal-api.calypsonet.org/guides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/guides/","section":"guides","summary":"Release procedure  Create a branch dedicated to the current release. Check gradle.properties file:  Check the consistency of the version.   Check build.gradle.kts file:  Use only released dependencies.","tags":null,"title":"Maintenance Guides","type":"book"},{"authors":null,"categories":null,"content":" The diagram below shows the dependencies between the client application, the certifiable framework components and the terminal APIs:\n  Here are the most important things to remember:\n Each API has its own life cycle. The APIs contain only interfaces. The \u0026ldquo;Reader API\u0026rdquo; and the \u0026ldquo;Calypso API\u0026rdquo; are public and can be used by the developer of the client application. The \u0026ldquo;Card API\u0026rdquo; is internal and is intended for the developer of the certifiable framework components only.  ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1652168683,"objectID":"43c0c4121ee50066f7d192a6504d86bf","permalink":"https://terminal-api.calypsonet.org/apis/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/","section":"apis","summary":"General presentation of the dependencies between the different Terminal APIs.","tags":null,"title":"Terminal architecture - APIs \u0026 software layers","type":"book"},{"authors":null,"categories":null,"content":" REV3.2 \u0026amp; REV3.3 transaction mode Calypso API proposal   REV3.2 session with intermediate authentication   REV3.2 session with encrypted commands   SAM extension SAM API proposal   ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1667395548,"objectID":"54d87be8e00148f49d214c5c8a8b46ab","permalink":"https://terminal-api.calypsonet.org/draft/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/draft/","section":"draft","summary":"possible evolutions of the Terminal APIs.","tags":null,"title":"Terminal APIs - draft discussion","type":"book"},{"authors":null,"categories":null,"content":" current work and future developments  extension of the Calypso API to add support for Prime Extended and Prime PKI transaction modes  ciphered card commands/responses, and intermediate mutual authentication inside a secure session asymmetric card authentication without a SAM   refactoring of the Calypso API to integrate different Calypso SAM solutions (legacy SAM \u0026amp; Open SAM)  split of the Calypso API to separate card operations in a Calypso Card API independently to the SAM solution Calypso Legacy SAM API to support all transaction modes of the legacy SAM C1.   Reader API \u0026amp; Card API refactoring for the setting of a card selection  moving of some elements of card DF selector from the Card API to the Reader API → This will simplify the Card API, and will allow the implementation of the ISO selection settings to be factorised independently of the card extensions.    History of developments    Date API Version Changes     2022/10/26 Reader API 1.1 add the importation/exportation of card selection scenarios allows a solution-specific selection request prepared on a terminal with the specific card library to be deployed to a terminal without this dedicated library   Calypso API 1.4 improves support for file selection responses for old card products   2022/10/04 Calypso API 1.3 addition of a specific identifier to the Calypso HSM product allows to manage differences in behaviour with the legacy SAM C1   2022/05/30 Calypso API 1.2 Support of Calypso Prime Extended SAM operations to generate or verify data signatures    2022/02/01 Calypso API 1.1 Support of the full card command set of Calypso Prime Regular Binary files management, update of multiple counters, record search, key change Support of EF without SFI     ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1667589004,"objectID":"a4b19ceb3f71c02487c6a5253017df7b","permalink":"https://terminal-api.calypsonet.org/roadmap/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/roadmap/","section":"roadmap","summary":"possible evolutions of the Terminal APIs.","tags":null,"title":"Terminal APIs - draft discussion","type":"book"},{"authors":null,"categories":null,"content":" The Calypsonet Terminal Reader API defines the public elements shared by the reader.\n Interfaces The reader API is a high-level interface used by terminal applications to operate smart card readers, it:\n  provides the means to identify card readers and verify the presence of smart cards.\n  offers the possibility to configure the observation of readers in order to be notified on card insertion or withdrawal.\n  is the entry point to manage the selection of a smart card in a specific reader.\n     Reader identification Any smart card reader entity should be accessible through an implementation of the CardReader interface. Each is defined with a specific name. A reader could be designed to operate contactless card or a contact card. Finally, this interface can inform about the presence of a card in the reader.\nConfigurableCardReader A reader with the capability to configure the communication protocols with smart card (contactless or contact) could implement the ConfigurableCardReader interface to activate or deactivate some communication protocols.\nReader observation If a reader has the ability to dynamically detect changes on the card presence, then it can also implement the interface ObservableCardReader.\nObservers implementing the CardReaderObserverSpi could be declared to an observable card reader to be notified on specific CardReaderEvent: card insertion, card selection (matched), or card removal.\nCard Selection The CardSelectionManager provides the possibility to prepare a request that could contain one or several card application selections.\nThe CardSelection SPI interface could be extended by the API of a specific smart card solution to improve the selection request with settings specific to the smart card solution.\nThrough the card selection manager, the prepared card selections could be managed in\n  synchronously: processed directly on a specific card reader on which a card is already present,\n  or asynchronously: scheduled on a specific observable reader in order to be operated dynamically in case of card insertion detection.\n  If several card selections are prepared, the card selection manager operate the card selection in the order of preparation. By default, the card selection manager stops the card selection processing on the first successful card selection, and the logical channel is kept open.\n  In case the multiple selection mode is activated during the preparation, the card selection manager tries to operate ‘all’ the prepared selections, even if one or several of them are successful. If the last selection is successful, the logical channel could be kept open with the last selected application.\n  during the card selection preparation, it could also be explicitly requested to close the logical channel after the card selection.\n  Moreover, it is possible to export/import a selection scenario in JSON format.\n Card selection modes Depending on the card transaction use case, or on the reader capability, there are two ways to manage the selection of a card:\n Either synchronously on a simple reader, a selection could be operated directly by transmitting the card selection scenario. In this case the same entity manages both the card selection and the card processing. Otherwise asynchronously on an observable reader, a scheduled card selection could be defined. In this case the card selection is operated automatically at the insertion of the card. In this case, the card selection is next managed by the observable reader, but the card processing is managed by a reader observer.    Reader API - Card Selection Modes - Activity Diagram   Observable reader states An observable reader is active only when at least one reader observer is registered, and if the start of the detection has been requested. When active, an observable reader could switch between three internal states:\n Wait for card insertion Wait for card processing Wait for card removal  In the nominal case, a reader observer indicates to the observable reader that the processing of the card is finished by releasing the card channel. To manage a failure of the reader observer process, the observable reader interface provides also a method to finalize the card processing.\n  Reader API - Observable Reader States - Activity Diagram  The states could be switched:\n due to an explicit API request (blue arrows):  the release of the card channel, the call of an observable reader method:  the addition or the remove of an observable reader, a request to start or stop the detection, to finalize the card processing.     Or because of an external event (red arrows), the insertion or the remove of a card.  the insertion of a card causing the observable reader to notify a CARD_MATCHED reader event (in case of successful scheduled selection) or a CARD_INSERTED reader event (notification mode defined as ALWAYS). the removal of a card causing the observable reader to notify a CARD_REMOVED reader event.    If a card detection is started with the REPEATING detection mode, then later when the card is removed, the reader starts again the detection of a new card.\nNotification of card removal during the card removal wait state is a feature of any observable reader. However, some observable readers may additionally have the ability to notify removal during the card processing state.\n Limitations \u0026amp; constraints On a specific card reader, the Reader API allows to address only a single logical channel.\n  Implementations \u0026amp; API Documentation  The third version number (x.y.z) only concerns updates of the javadoc because this component does not contain any implementation, but only an API. Therefore, it is recommended to always perform a dynamic import as described above in order to have the most up-to-date documentation.   Reader API in Java  1.1.0  API documentation  UML  GitHub repository  Changelog   All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Groovy  Gradle Kotlin  Maven   Copy implementation \u0026#39;org.calypsonet.terminal:calypsonet-terminal-reader-java-api:1.1.\u0026#43;\u0026#39;  implementation(\u0026#34;org.calypsonet.terminal:calypsonet-terminal-reader-java-api:1.1.\u0026#43;\u0026#34;)  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.calypsonet.terminal\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;calypsonet-terminal-reader-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;[1.1.0,1.2.0)\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;   Reader API in C++  1.0.0  API documentation  UML  GitHub repository   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1667913674,"objectID":"b11839ed0888d32a0cc4fe9885a359ec","permalink":"https://terminal-api.calypsonet.org/apis/calypsonet-terminal-reader-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/calypsonet-terminal-reader-api/","section":"apis","summary":"Public API which defines the elements shared by the reader.","tags":null,"title":"Calypsonet Terminal Reader API","type":"book"},{"authors":null,"categories":null,"content":" The Calypsonet Terminal Card API defines the internal elements shared by the reader layer to implement specific card layers (like the Calypso Card layer).\n Interfaces     Limitations \u0026amp; constraints The Card API doesn\u0026rsquo;t allow to request the transmission to a card of the APDU commands \u0026ldquo;Select Application by DF Name\u0026rdquo; or \u0026ldquo;Get Response\u0026rdquo;:\n the selection of a specific card application could be managed only through a Card Selection Request. the APDU response status words 61XYh \u0026amp; 6CXYh are automatically handled by the reader layer library by issuing a Get Response or by re-issuing the previous command with the expected \u0026lsquo;Le\u0026rsquo; field.    Implementations \u0026amp; API Documentation  The third version number (x.y.z) only concerns updates of the javadoc because this component does not contain any implementation, but only an API. Therefore, it is recommended to always perform a dynamic import as described above in order to have the most up-to-date documentation.   Card API in Java  1.0.0  API documentation  UML  GitHub repository  Changelog   All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Groovy  Gradle Kotlin  Maven   Copy implementation \u0026#39;org.calypsonet.terminal:calypsonet-terminal-card-java-api:1.0.\u0026#43;\u0026#39;  implementation(\u0026#34;org.calypsonet.terminal:calypsonet-terminal-card-java-api:1.0.\u0026#43;\u0026#34;)  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.calypsonet.terminal\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;calypsonet-terminal-card-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;[1.0.0,1.1.0)\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;   Card API in C++  1.0.0  API documentation  UML  GitHub repository   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1667913674,"objectID":"586d1349891225248c7134e777120f95","permalink":"https://terminal-api.calypsonet.org/apis/calypsonet-terminal-card-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/calypsonet-terminal-card-api/","section":"apis","summary":"Internal API which defines the elements shared between the reader layer and the card layer.","tags":null,"title":"Calypsonet Terminal Card API","type":"book"},{"authors":null,"categories":null,"content":" The Calypsonet Terminal Calypso API is an extension of the Calypsonet Terminal Reader API which provides a high-level API standardizing the way to interact with a Calypso® product (card, NFC smartphone applet/application, SAM, etc\u0026hellip;).\n Interfaces The Calypso API provides the means to select a target card or SAM and then perform a transaction with the selected target.\n The result of a card selection is a smartcard image whose file structure and data records can be browsed. The result of a SAM selection is a smartcard image whose keys' parameters can be read. A transaction with a target card or SAM may involve a master SAM in order to secure the operations.  The CalypsoCard \u0026amp; CalypsoSam interfaces provide ‘getters’ in order to recover the information of the selected smartcard.\nTo optimize the number of exchanges with a card reader of a SAM reader, the Calypso API allows to group the commands. A set of command could be first \u0026lsquo;prepared\u0026rsquo;, and then be \u0026lsquo;processed\u0026rsquo; by a selected target at the selection or during the transaction. A transaction with a Calypso card is fully managed through the CardTransactionManager interface:\n    Selection of a Calypso card A Calypso card selection could be defined to accept or not invalidated card.\nThrough the selection only basic Select File (without changing DF) or Read Records commands could joined: the goal is to recover in the selection result some file status or record data of elements present in all cards of a ticketing networks. The type of card product has not yet been identified, the commands are prepared to be supported by all types of card products: Prime, Light, or Regular.\nThen, if a Calypso card has matched the selection request, a Calypso card image is returned, some file headers or file records could be filled depending on the information recovered in the responses of the Select File or Read Records processed.\n Transaction with a Calypso card Except the operations involving secure processing on \u0026ldquo;data\u0026rdquo; (data signature computation / verification, data ciphering / un-ciphering), only commands for the card need to be prepared though the Card Transaction Manager interface. Depending on the operation, if necessary the security involving the master SAM must be controlled internally by the Calypso library.\nSimple operation outside a session PIN plain verification / change outside a session   Calypso API - Verify / Change Plain PIN - Sequence Diagram  Data secure processing outside a session   Calypso API - Data secure processing outside a session - Sequence Diagram  Key / PIN ciphered update outside a session   Calypso API - Change Key / Ciphered PIN outside a session - Sequence Diagram  Stored Value operation outside a session   Calypso API - standalone Stored Value transaction - Sequence Diagram  Simple secure session for fast embedded performance This example illustrates the ticketing processing of a validation: only the necessary data is read from the card.\nIn case of communication failure with the card, to support a recovery transaction on another terminal: the ratification status and the last event are checked at the session opening, and the session is closed as not ratified directly followed by a ratification command.\n  Calypso API - Simple Secure Session - Sequence Diagram  Simple secure session for an efficient distributed system In most of the cases, it should be possible to handle a secure session with a Calypso card, using only:\n 3 exchanges with the card reader (selection processing, session opening processing, and session closing processing), and 3 exchanges with the SAM reader (terminal session challenge recovery, session MAC computation, and card authentication).  This example shows the loading of a contract during a sale, to speed up the identification of the card content while limiting the exchange of messages with the card reader, some data can be read out of session during the selection, then read again during the session.\nIn case of communication failure with the card, if the recovery transaction is supported only on the same terminal, then the checking of the ratification status is not necessary at the session opening, and the session could be closed as ratified.\n  Calypso API - Simple Secure Session - Sequence Diagram  PIN ciphered verification inside a session   Calypso API - Verify Ciphered PIN inside a session - Sequence Diagram  Data secure processing inside a session   Calypso API - Data secure processing inside a session - Sequence Diagram  Stored Value operation inside a session   Calypso API - Stored Value transaction inside a secure session - Sequence Diagram  Multiple secure sessions   Calypso API - Multiple secure session - Sequence Diagram   Selection of a Calypso SAM  Transaction with a Calypso SAM   Implementations \u0026amp; API Documentation  The third version number (x.y.z) only concerns updates of the javadoc because this component does not contain any implementation, but only an API. Therefore, it is recommended to always perform a dynamic import as described above in order to have the most up-to-date documentation.   Calypso API in Java  1.4.1  API documentation  UML  GitHub repository  Changelog   All deliverables are available directly from the Maven Central Repository or by using one of the project resource managers below:\nGradle Groovy  Gradle Kotlin  Maven   Copy implementation \u0026#39;org.calypsonet.terminal:calypsonet-terminal-calypso-java-api:1.4.\u0026#43;\u0026#39;  implementation(\u0026#34;org.calypsonet.terminal:calypsonet-terminal-calypso-java-api:1.4.\u0026#43;\u0026#34;)  \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;org.calypsonet.terminal\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;calypsonet-terminal-calypso-java-api\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;[1.4.0,1.5.0)\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt;   Calypso API in C++  1.1.0  API documentation  UML  GitHub repository   ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1667913674,"objectID":"ef1732cfaa5d8574698c03d053085d43","permalink":"https://terminal-api.calypsonet.org/apis/calypsonet-terminal-calypso-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/apis/calypsonet-terminal-calypso-api/","section":"apis","summary":"Public high-level API which standardizes the way to interact with a Calypso® product (card, NFC smartphone applet/application, SAM, etc...).","tags":null,"title":"Calypsonet Terminal Calypso API","type":"book"}]