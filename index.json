[{"authors":null,"categories":null,"content":"\nThe diagram below shows the dependencies between the client application, the certifiable framework components and the terminal APIs:\nKey points:\nIndependent Lifecycle: Each API follows its own distinct lifecycle. Interface-Exclusive: APIs exclusively consist of interfaces. Public APIs: Some APIs are intended to be used by application developers. Internal Usage: Some APIs are dedicated to internal use, and intended to developers of specific implementations. ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1714981342,"objectID":"bba7979f4d96680ded0064ad5f2c68fd","permalink":"https://terminal-api.calypsonet.org/specifications/reader-layer/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/reader-layer/","section":"specifications","summary":"General presentation of the dependencies between the different Terminal APIs.","tags":null,"title":"Reader Layer Specification","type":"book"},{"authors":null,"categories":null,"content":"\nThe diagram below shows the dependencies between the client application, the certifiable framework components and the terminal APIs:\nKey points:\nIndependent Lifecycle: Each API follows its own distinct lifecycle. Interface-Exclusive: APIs exclusively consist of interfaces. Public APIs: Some APIs are intended to be used by application developers. Internal Usage: Some APIs are dedicated to internal use, and intended to developers of specific implementations. ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1714981342,"objectID":"07c0dcabebce7ac55ebd6bbf3532c80e","permalink":"https://terminal-api.calypsonet.org/specifications/calypso-layer/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/calypso-layer/","section":"specifications","summary":"General presentation of the dependencies between the different Terminal APIs.","tags":null,"title":"Calypso Layer Specification","type":"book"},{"authors":null,"categories":null,"content":"\nThis section lists the specifications associated to the Reader \u0026amp; Calypso layers.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1714981342,"objectID":"a5408ec414e3fc16f4bde1a84b4dbf46","permalink":"https://terminal-api.calypsonet.org/specifications/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/","section":"specifications","summary":"This section lists the specifications associated to the Reader \u0026 Calypso layers.","tags":null,"title":"Specifications","type":"book"},{"authors":null,"categories":null,"content":"Release procedure Create a branch dedicated to the current release. Check gradle.properties file: Check the consistency of the version. Check build.gradle.kts file: Use only released dependencies. Upgrade Keyple dependencies to their latest released versions. Update CHANGELOG.md file: Verify the consistency of the Unreleased section. Move content of Unreleased section to a new “release” section. Update bottom links. Build and test the component. Commit the modified files using if possible the commit message Release x.y.z. Push and create a pull request to merge the branch into main. Await the success of the build by the CI. Squash and merge the pull request. Await the success of the build by the CI. Create a release on GitHub: Set tag x.y.z Set release name x.y.z Set the content by copying/pasting the content of the current release description in the CHANGELOG.md file without the bottom links. Await the success of the build by the CI. Connect to Nexus Repository Manager of Calypsonet and go to “Staging Repositories” page: Select the correct folder to Close \u0026amp; Release. It must contain the manifests, the JAR and all the others elements (sources, javadoc). Close the folder. Release the folder. The other unwanted folders could be dropped. Check the availability of the release on the Maven Repository. This step may take from 10 minutes to 2 hours. Update this website: Update version in params.yaml file. Update others elements if needed. Commit and push the modifications. ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1639758865,"objectID":"be8ec78af1ceb94560f6fb17d4ec6af9","permalink":"https://terminal-api.calypsonet.org/guides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/guides/","section":"guides","summary":"Release procedure Create a branch dedicated to the current release. Check gradle.properties file: Check the consistency of the version. Check build.gradle.kts file: Use only released dependencies. Upgrade Keyple dependencies to their latest released versions.","tags":null,"title":"Maintenance Guides","type":"book"},{"authors":null,"categories":null,"content":" Latest version 2.1.0 UML class diagram GitHub repository As part of the Card Layer, the Calypso Card API provides high-level functionality for selecting and performing transactions with Calypso cards.\nInterfaces The Calypso Card API provides the means to select a target card and then perform a transaction with the selected card.\nThe result of a card selection is a smartcard image whose file structure and data records can be browsed. A transaction with a target card may involve a control SAM in order to secure the operations. The CalypsoCard interfaces provide accessors in order to recover the information of the selected smart card.\nTo optimize the number of exchanges with a card reader, the Calypso Card API allows to group the commands. A set of command could be first prepared, and then be processed by a selected target at the selection or during the transaction. A transaction with a Calypso card is fully managed through the CardTransactionManager interface:\nSelection of a Calypso card A Calypso card selection could be defined to accept or not invalidated card.\nThrough the selection only basic Select File (without changing DF) or Read Records commands could joined: the goal is to recover in the selection result some file status or record data of elements present in all cards of a ticketing networks. The type of card product has not yet been identified, the commands are prepared to be supported by all types of card products: Prime, Light, or Regular.\nThen, if a Calypso card has matched the selection request, a Calypso card image is returned, some file headers or file records could be filled depending on the information recovered in the responses of the Select File or Read Records processed.\nTransaction with a Calypso card Except the operations involving secure processing on “data” (data signature computation / verification, data ciphering / un-ciphering), only commands for the card need to be prepared though the Card Transaction Manager interface. Depending on the operation, if necessary the security involving the master SAM must be controlled internally by the Calypso library.\nSimple operation outside a session PIN plain verification / change outside a session Calypso Card API - Verify / Change Plain PIN - Sequence Diagram Data secure processing outside a session Calypso Card API - Data secure processing outside a session - Sequence Diagram Key / PIN ciphered update outside a session Calypso Card API - Change Key / Ciphered PIN outside a session - Sequence Diagram Stored Value operation outside a session Calypso Card API - standalone Stored Value transaction - Sequence Diagram Simple secure session for fast embedded performance This example illustrates the ticketing processing of a validation: only the necessary data is read from the card.\nIn case of communication failure with the card, to support a recovery transaction on another terminal: the ratification status and the last event are checked at the session opening, and the session is closed as not ratified directly followed by a ratification command.\nCalypso Card API - Simple Secure Session - Sequence Diagram Simple secure session for an efficient distributed system In most of the cases, it should be possible to handle a secure session with a Calypso card, using only:\n3 exchanges with the card reader (selection processing, session opening processing, and session closing processing), and 3 exchanges with the SAM reader (terminal session challenge recovery, session MAC computation, and card authentication). This example shows the loading of a contract during a sale, to speed up the identification of the card content while limiting the exchange of messages with the card reader, some data can be read out of session during the selection, then read again during the session.\nIn case of communication failure with the card, if the recovery transaction is supported only on the same terminal, then the checking of the ratification status is not necessary at the session opening, and the session could be closed as ratified.\nCalypso Card API - Simple Secure Session - Sequence Diagram PIN ciphered verification inside a session Calypso Card API - Verify Ciphered PIN inside a session - Sequence Diagram Data secure processing inside a session Calypso Card API - Data secure processing inside a session - Sequence Diagram Stored Value operation inside a session Calypso Card API - Stored Value transaction inside a secure session - Sequence Diagram Multiple secure sessions Calypso Card API - Multiple secure session - Sequence Diagram ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1714981342,"objectID":"6ad7cc20aaf4cc03812350271d69b202","permalink":"https://terminal-api.calypsonet.org/specifications/calypso-layer/calypso-card-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/calypso-layer/calypso-card-api/","section":"specifications","summary":"Public high-level API which standardizes the way to interact with a Calypso® product (card, NFC smartphone applet/application, SAM, etc...).","tags":null,"title":"Calypso Card API (external)","type":"book"},{"authors":null,"categories":null,"content":" Latest version 2.0.1 UML class diagram GitHub repository As part of the Reader Layer, the Reader API provides high-level functionality for identifying, monitoring, configuring readers and process card selection scenarios.\nInterfaces The Reader API is a high-level interface used by terminal applications to operate smart card readers, it:\nprovides the means to identify card readers and verify the presence of smart cards.\noffers the possibility to configure the observation of readers in order to be notified on card insertion or withdrawal.\nis the entry point to manage the selection of a smart card in a specific reader.\nReader identification Any smart card reader entity should be accessible through an implementation of the CardReader interface. Each is defined with a specific name. A reader could be designed to operate contactless card or a contact card. Finally, this interface can inform about the presence of a card in the reader.\nConfigurableCardReader A reader with the capability to configure the communication protocols with smart card (contactless or contact) could implement the ConfigurableCardReader interface to activate or deactivate some communication protocols.\nReader observation If a reader has the ability to dynamically detect changes on the card presence, then it can also implement the interface ObservableCardReader.\nObservers implementing the CardReaderObserverSpi could be declared to an observable card reader to be notified on specific CardReaderEvent: card insertion, card selection (matched), or card removal.\nCard Selection The CardSelectionManager provides the possibility to prepare a request that could contain one or several card application selections.\nThe CardSelection SPI interface could be extended by the API of a specific smart card solution to improve the selection request with settings specific to the smart card solution.\nThrough the card selection manager, the prepared card selections could be managed in\nsynchronously: processed directly on a specific card reader on which a card is already present,\nor asynchronously: scheduled on a specific observable reader in order to be operated dynamically in case of card insertion detection.\nIf several card selections are prepared, the card selection manager operate the card selection in the order of preparation. By default, the card selection manager stops the card selection processing on the first successful card selection, and the logical channel is kept open.\nIn case the multiple selection mode is activated during the preparation, the card selection manager tries to operate ‘all’ the prepared selections, even if one or several of them are successful. If the last selection is successful, the logical channel could be kept open with the last selected application.\nduring the card selection preparation, it could also be explicitly requested to close the logical channel after the card selection.\nMoreover, it is possible to export/import a selection scenario in JSON format.\nCard selection modes Depending on the card transaction use case, or on the reader capability, there are two ways to manage the selection of a card:\nEither synchronously on a simple reader, a selection could be operated directly by transmitting the card selection scenario. In this case the same entity manages both the card selection and the card processing. Otherwise asynchronously on an observable reader, a scheduled card selection could be defined. In this case the card selection is operated automatically at the insertion of the card. In this case, the card selection is next managed by the observable reader, but the card processing is managed by a reader observer. Reader API - Card Selection Modes - Activity Diagram Observable reader states An observable reader is active only when at least one reader observer is registered, and if the start of the detection has been requested. When active, an observable reader could switch between three internal states:\nWait for card insertion Wait for card processing Wait for card removal In the nominal case, a reader observer indicates to the observable reader that the processing of the card is finished by releasing the card channel. To manage a failure of the reader observer process, the observable reader interface provides also a method to finalize the card processing.\nReader API - Observable Reader States - Activity Diagram The states could be switched:\ndue to an explicit API request (blue arrows): the release of the card channel, the call of an observable reader method: the addition or the remove of an observable reader, a request to start or stop the detection, to finalize the card processing. Or because of an external event (red arrows), the insertion or the remove of a card. the insertion of a card causing the observable reader to notify a CARD_MATCHED reader event (in case of successful scheduled selection) or a CARD_INSERTED reader event (notification mode defined as ALWAYS). the removal of a card causing the observable reader to …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1714981342,"objectID":"bb15af3237bfa6b8714a7ace9e705a61","permalink":"https://terminal-api.calypsonet.org/specifications/reader-layer/reader-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/reader-layer/reader-api/","section":"specifications","summary":"Public API which defines the elements shared by the reader.","tags":null,"title":"Reader API (external)","type":"book"},{"authors":null,"categories":null,"content":" Latest version 2.0.1 UML class diagram GitHub repository As part of the Reader Layer, the Calypsonet Terminal Card API defines the internal elements shared by the reader layer to implement specific card layers (like the Calypso Card layer).\nInterfaces Limitations \u0026amp; constraints The Card API doesn’t allow to request the transmission to a card of the APDU commands “Select Application by DF Name” or “Get Response”:\nthe selection of a specific card application could be managed only through a Card Selection Request. the APDU response status words 61XYh \u0026amp; 6CXYh are automatically handled by the reader layer library by issuing a Get Response or by re-issuing the previous command with the expected ‘Le’ field. ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1714981342,"objectID":"396c1110bbe6a4c2e3254e73d2f3aadc","permalink":"https://terminal-api.calypsonet.org/specifications/reader-layer/card-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/reader-layer/card-api/","section":"specifications","summary":"Internal API which defines the elements shared between the reader layer and the card layer.","tags":null,"title":"Card API (internal)","type":"book"},{"authors":null,"categories":null,"content":" Latest version 0.6.0 UML class diagram GitHub repository As part of the Card Layer, the Calypso Crypto Legacy SAM API provides high-level functionality for selecting and performing transactions with Calypso Legacy SAMs and can also be coupled with the Calypso Card API to handle the cryptographic calculations required for Calypso card transactions secured by symmetric keys.\nInterfaces The Calypso Crypto Legacy SAM API provides the means to select a target or control SAM and then perform a transaction with the selected target.\nThe result of a SAM selection is a smartcard image whose keys’ parameters can be read. A transaction with a target SAM may involve a control SAM in order to secure the operations. The LegacySam interface provide accessors in order to recover the information of the selected smartcard.\nTo optimize the number of exchanges with a SAM reader, the Legacy SAM API allows to group the commands. A set of command could be first prepared, and then be processed by a selected target at the selection or during the transaction. A transaction with a Calypso SAM is fully managed through one of the LSTransactionManager interfaces:\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1714981342,"objectID":"c10578fe20bc7ee273ea8d07b0923094","permalink":"https://terminal-api.calypsonet.org/specifications/calypso-layer/calypso-legacysam-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/calypso-layer/calypso-legacysam-api/","section":"specifications","summary":"Public high-level API which standardizes the way to interact with a Calypso® legacy SAM product (SAM-C1, HSM-C1, etc...).","tags":null,"title":"Calypso Legacy SAM API (external)","type":"book"},{"authors":null,"categories":null,"content":" Latest version 0.1.1 UML class diagram GitHub repository The Calypso Crypto Symmetric API is the communication interface between the Calypso Card and the Calypso Symmetric Crypto libraries (e.g. Legacy SAM, Open SAM).\nInterfaces ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1714981342,"objectID":"209a3029aad4487a45c4227125b6ee5f","permalink":"https://terminal-api.calypsonet.org/specifications/calypso-layer/calypso-symmetric-crypto-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/calypso-layer/calypso-symmetric-crypto-api/","section":"specifications","summary":"Internal API which defines the elements shared between the Calypso Card and the Calypso Symmetric Crypto libraries.","tags":null,"title":"Calypso Symmetric Crypto API (internal)","type":"book"},{"authors":null,"categories":null,"content":" Latest version 0.2.0 UML class diagram GitHub repository The Calypso Crypto Asymmetric API is the communication interface between the Calypso Card and the Calypso Asymmetric Crypto libraries.\nInterfaces ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1714981342,"objectID":"2404a829316824df539e0e71a271b9fc","permalink":"https://terminal-api.calypsonet.org/specifications/calypso-layer/calypso-asymmetric-crypto-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/calypso-layer/calypso-asymmetric-crypto-api/","section":"specifications","summary":"Internal API which defines the elements shared between the Calypso Card and the Calypso Asymmetric Crypto libraries.","tags":null,"title":"Calypso Asymmetric Crypto API (internal)","type":"book"}]