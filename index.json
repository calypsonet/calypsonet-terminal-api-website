[{"authors":null,"categories":null,"content":" Project governance CNA’s obviously legitimate to lead the definition of software interfaces to manage Calypso solutions. Regarding the definition of generic interfaces for the smart card industry, CNA is open to share the driving of this work with any interested organization or manufacturer.\nDefinition of Calypso layer APIs The Calypso Networks Association is responsible for specifying, qualifying and promoting the Calypso ticketing standard. Contributions to the definition of Calypso APIs for ticketing terminals are therefore reserved for CNA members participating in the “TC Terminal” technical working group.\nRegistered members have access to a document database and a discussion forum to exchange ideas, propose and agree on solutions for the design of interoperable Calypso ticketing terminals. These collaborations have, for example, led to the specification of requirements for the Calypso layer of ticketing terminals. Compliance with these requirements by ticketing terminal solutions ensures interoperability with all Calypso card and SAM products. Calypso APIs for ticketing terminals:\nenable the implementation of libraries that meet the requirements of the Calypso layer, provide a solution for developing ticketing applications for terminals independently of Calypso middleware solutions, will soon enable Calypso terminal solutions to certify compliance with Calypso layer requirements. Join CNA to contribute to defining Calypso APIs for ticketing terminals.\nDefinition of Reader layer APIs An interoperable Calypso software layer can only be built on a generic reader software layer interface, independent of card reader solutions and ticketing terminal architecture (embedded/distributed). CNA is not necessarily legitimate in defining such “universal” terminal interfaces for the smart card industry but has initiated these definitions in response to the need for a basis on which to build Calypso APIs.\nFor the definition of the reader APIs for ticketing terminals, CNA is interested in the participation of any external contributor and is also open to sharing the governance of this project with other entities or the open-source community. (CNA offered the Smart Ticketing Alliance to host this project. Another option currently under consideration is to transfer this responsibility to the Eclipse Keypop open-source project.)\nTypes of contributions Thanks for your interest in participating in the reader layer APIs definition for a ticketing terminal. There are several ways to contribute to the project:\nPropose a fix for a problem that is already known or that you have identified. In this case you will have to notify the issue in the repository where the problem appeared and reference the issue in all the other repositories affected by the fix. Propose the creation of a new component: in this case you will first have to create an issue in the repository github.com/calypsonet/calypsonet-terminal-api-website to justify the need and request the creation of a new repository, wait for the issue to be resolved by the decision of the committers, and then create an issue in the new repository signifying the start of development of the new component. Contributing via fork Check if there is already a GitHub issue for what you want to work on or create one. Announce in the comments section that you want to work on the issue. Also describe the solution you want to implement. To improve the chances for your contribution to be accepted, you’ll want to wait for the feedback of the committers. Fork the repository. Create a new branch from main for your changes. Name it after the issue number, e.g. #XXX_[description_of_changes]. Implement your changes. Rebase on main. Run ./gradlew spotlessApply to format the code and add licence headers to the files. Run ./gradlew build (to check code formatting and run tests) Commit your changes using the -s flag in order to add a Signed-off-by footer as mentioned above and use the same email address you are using for your GitHub account.\nUse commits messages that respect the commits message conventions. Push your changes to your forked repository. Submit a pull request referencing the related issue(s). After submitting, do not use your branch for any other development, otherwise further changes that you make will be visible in the PR. Commits message conventions In order to ensure good readability of the commit history, it is necessary to have consistency in the structure of the commit messages.\nTherefore, all contributors to the project are asked to respect the structure of the commits messages as described in the guide Conventional Commits 1.0.0:\n\u0026lt;type\u0026gt;[optional scope]: \u0026lt;description\u0026gt; [optional body] \u0026lt;footer(s)\u0026gt; Furthermore, it is requested to indicate in the footer section the associated issue(s) that will be closed (Closes #xxx, closes #yyy, etc.). This will automatically close the associated issue(s) when the pull request is validated (see GitHub Docs for more details).\nIt is also required to …","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1748439892,"objectID":"03b6ed671df847a7fe95d07d922cdb1a","permalink":"https://terminal-api.calypsonet.org/community/contributing/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/community/contributing/","section":"community","summary":"Find out how to contribute to the Calypso Networks Terminal API project and how it can benefit your organization.","tags":null,"title":"How to contribute","type":"book"},{"authors":null,"categories":null,"content":"Current work and future developments For 2025, addition of an interface dedicated to the management of the new Calypso “OpenSAM” secure module.\nNo impact on the secure card transaction thanks to the abstraction provided by the Calypso Symmetric Crypto interface. OpenSAM selection and personalization functions. History of developments Date API Version Changes 2024/04/11 Calypso Card API 2.1.0 Added management of PKI card functions configuring a chain of trust on a terminal asymmetric session signature verification personalization and retrieval of card and CA certificates Calypso Crypto Asymmetric API 0.2 refactoring of the Calypso PKI interface Calypso Legacy SAM API 0.5 support for \u0026#39;CardCert\u0026#39; card certificate personalization (the \u0026#39;CACert\u0026#39; Certificate Authority feature is managed by the SAM) 2024/01/10 Calypso Legacy SAM API 0.4 Management of static \u0026amp; dynamic lock Adds dedicated SPI to provide lock data 2023/11/27 Global refactoring to enable any implementation of terminal APIs and to allow the Eclipse Keypop project to continue to implement open source Java and C++ versions of the terminal APIs. refactoring of the Calypso API to integrate different Calypso SAM solutions (legacy SAM \u0026amp; Open SAM) split of the Calypso API to separate card operations in a Calypso Card API independently to the SAM solution Calypso Legacy SAM API to support all transaction modes of the legacy SAM C1. Reader API \u0026amp; Card API refactoring for the setting of a card selection moving of some elements of card DF selector from the Card API to the Reader API → This will simplify the Card API, and will allow the implementation of the ISO selection settings to be factorised independently of the card extensions. Reader API 2.0 Recovery of the Card Selector SPI from the Card API Card API 2.0 Moved Card Selector SPI to the Reader API Calypso Card API 2.0 split of the Calypso API to separate card operations in a Calypso Card API independently to the SAM solution refactoring to integrate in a Calypso card transaction different Calypso SAM solutions: initially the Calypso Legacy SAM, then later the Calypso OpenSAM Calypso Crypto Asymmetric API 0.1 New interface to manage the communication between a library implementing the Calypso Card API and another library processing the Calypso card PKI Calypso Crypto Symmetric API 0.1 New interface to manage the communication between a library implementing the Calypso Card API and another library processing a Calypso SAM solution Calypso Legacy SAM API 0.3 New public API to manage a transaction with a Calypso Legacy SAM (e.g. SAM-C1) secure reading of target SAM parameters secure writing of parameters, keys and counter ceilings of a target SAM free reading and writing with a target SAM data PSO signature computation \u0026amp; verification by a target SAM 2023/05/22 Reader API 1.3 Introduced a new capability to export a locally processed card selection scenario to be imported and analyzed remotely by another card selection manager. 2023/04/04 Calypso API 1.8 Adds the possibility to improve performance by anticipating the SAM context before the transaction is started. 2023/03/08 Calypso API 1.7 Adds the secure session \u0026#34;pre-open\u0026#34; variant Adds the possibility read counters and binary files during the card selection process 2023/02/27 Calypso Crypto Legacy SAM API 0.2 adds \u0026#34;counters \u0026amp; ceilings\u0026#34; management commands in static mode 2023/02/17 Calypso API 1.6 Simplifies the card transaction API by providing a single \u0026#34;process\u0026#34; method Adds a security setting to be able to disable the automatic combination of a \u0026#34;Read Record\u0026#34; command with the \u0026#34;Open Secure Session\u0026#34; command 2023/01/10 Reader API 1.2 Adds a way to retrieve the name of the protocol currently used by the reader to communicate with the card 2022/12/22 Calypso API 1.5 Completes the support of \u0026#34;Calypso Prime Extended\u0026#34; card products ciphered card commands/responses inside a secure session intermediate mutual authentication inside a secure session 2022/12/12 Calypso Crypto Legacy SAM API 0.1 Alpha version of the new API dedicated to the management of legacy SAMs begins the support of free SAM transaction (without a control SAM) adds \u0026#34;compute/verify signature\u0026#34; commands adds \u0026#34;read event counter/ceiling\u0026#34; commands 2022/10/26 Reader API 1.1 Adds an \u0026#34;import/export\u0026#34; feature for card selection scenarios allows a terminal to execute or schedule a card selection scenario, previously prepared on a server, without having the dedicated card library (e.g. Calypso API) Calypso API 1.4 Improves the support of file selection responses for legacy card products 2022/10/04 Calypso API 1.3 Adds a specific identifier to the Calypso HSM product allows to manage differences in behaviour with the legacy SAM C1 2022/05/30 Calypso API 1.2 Begins the support of \u0026#34;Calypso Prime Extended\u0026#34; card products SAM operations to generate or verify data signatures 2022/02/01 Calypso API 1.1 Completes the support of \u0026#34;Calypso Prime Regular\u0026#34; card products binary files management, update of multiple counters, record …","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1730880199,"objectID":"98d6f058a353aa178a1b39cefa20d88f","permalink":"https://terminal-api.calypsonet.org/community/roadmap/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/community/roadmap/","section":"community","summary":"Overview of past and future API Releases.","tags":null,"title":"Project roadmap","type":"book"},{"authors":null,"categories":null,"content":"Dedicated interfaces by software layer Two levels of APIs are provided to interact with either the Reader or the Calypso layers, from the lowest to the highest:\nAt the bottom, the Reader Layer generic interfaces: Reader API: Controls any reader solution and manages application selection on a smart card. Card API: Interfaces a card processing library specific to a given smart card solution. Above, the Smart Card Solution Layer specific interfaces: several interfaces to integrate Calypso processing support: Calypso Card API and Legacy SAM API: Performs secure transactions with Calypso cards or with Calypso security modules such as SAM-S1 or SAM-C1. Symmetric Crypto API and Asymmetric Crypto API: Interfaces Calypso SAM or Calypso PKI processing libraries. an interface to integrate storage card processing support: Storage Card API: Performs transactions with storage cards. Dedicated interfaces according to development targets The ticketing terminal APIs are differentiated according to development goals:\nin green 🟢, high-level public reader and Calypso APIs dedicated to the design of applications on ticketing terminals. in orange 🔶, internal APIs dedicated to the design of middleware for smart card solutions (Calypso or others). API element visual status explanation Grayed-out elements indicate features that are not yet officially part of the API. These are currently under review and may either be formally added or removed in a future version. On minor or major API updates, elements displayed in blue represent newly introduced features officially added in the current version. On minor API versions, elements displayed in red that are marked with strikethrough are those that have been deprecated but are still present in the API. Actual removal of an element can only occur in a major version update. In such cases, the element must have been explicitly deprecated in one or more previous minor versions. ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1748873995,"objectID":"88f2aaf15c9b625b134d0f562008166f","permalink":"https://terminal-api.calypsonet.org/specifications/overview/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/overview/","section":"specifications","summary":"Dedicated interfaces by software layer Two levels of APIs are provided to interact with either the Reader or the Calypso layers, from the lowest to the highest:\nAt the bottom, the Reader Layer generic interfaces: Reader API: Controls any reader solution and manages application selection on a smart card.","tags":null,"title":"Ticketing Terminal APIs Specifications","type":"book"},{"authors":null,"categories":null,"content":"\nThe diagram below shows the dependencies between the client application, the certifiable framework components and the terminal APIs:\nKey points:\nIndependent Lifecycle: Each API follows its own distinct lifecycle. Interface-Exclusive: APIs exclusively consist of interfaces. Public APIs: Some APIs are intended to be used by application developers. Internal Usage: Some APIs are dedicated to internal use, and intended to developers of specific implementations. ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1748439892,"objectID":"bba7979f4d96680ded0064ad5f2c68fd","permalink":"https://terminal-api.calypsonet.org/specifications/reader-layer/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/reader-layer/","section":"specifications","summary":"The diagram below shows the dependencies between the client application, the certifiable framework components and the terminal APIs:\nKey points:\nIndependent Lifecycle: Each API follows its own distinct lifecycle. Interface-Exclusive: APIs exclusively consist of interfaces.","tags":null,"title":"Reader Layer Specification","type":"book"},{"authors":null,"categories":null,"content":"Ticketing Terminal Requirements To counteract the interoperability issues frequently encountered between ticketing terminal solutions and contactless smartcard products, CNA has specified a set of requirements that need to be followed by the different software layers of ticketing terminals. These rules are specifically dedicated to 3 software layers, from the lowest to the highest level:\nthe Reader Layer Requirements, the Calypso Layer Requirements, and the Ticketing Layer Requirements. The structure of the ticketing terminal APIs has been designed to match this architecture targeted by the ticketing terminal requirements.\nIn the near future, CNA plans to offer a certification program for ticketing terminal solutions to validate compliance with requirements for the reader layer and the Calypso layer. → The support of the Ticketing Terminal APIs will then be required to pass these certifications.\nAPIs compatibility with Terminal Requirements From Reader API version 2.0 \u0026amp; Calypso Card API version 2.0 The ticketing terminal APIs enable the implementation of libraries that unconditionally fully comply with the ticketing terminal requirements of the reader and Calypso layers.\nUp to Reader API version 1.3 \u0026amp; Calypso Card API version 1.8 The older ticketing terminal APIs can be implemented by libraries that can “generally” follow the terminal requirements of the reader and Calypso layers, but with a limitation on the localization of the card selection management. On early versions of the Reader and Calypso APIs, the card selection was managed through the Calypso API instead of the Reader API.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1740725586,"objectID":"e2caebfe1d11216d169a450600615782","permalink":"https://terminal-api.calypsonet.org/compliance/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/compliance/","section":"compliance","summary":"Ticketing Terminal Requirements To counteract the interoperability issues frequently encountered between ticketing terminal solutions and contactless smartcard products, CNA has specified a set of requirements that need to be followed by the different software layers of ticketing terminals.","tags":null,"title":"Terminal Compliance","type":"book"},{"authors":null,"categories":null,"content":"\nThe diagram below shows the dependencies between the client application, the certifiable framework components and the terminal APIs:\nKey points:\nIndependent Lifecycle: Each API follows its own distinct lifecycle. Interface-Exclusive: APIs exclusively consist of interfaces. Public APIs: Some APIs are intended to be used by application developers. Internal Usage: Some APIs are dedicated to internal use, and intended to developers of specific implementations. ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1748439892,"objectID":"07c0dcabebce7ac55ebd6bbf3532c80e","permalink":"https://terminal-api.calypsonet.org/specifications/calypso-layer/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/calypso-layer/","section":"specifications","summary":"The diagram below shows the dependencies between the client application, the certifiable framework components and the terminal APIs:\nKey points:\nIndependent Lifecycle: Each API follows its own distinct lifecycle. Interface-Exclusive: APIs exclusively consist of interfaces.","tags":null,"title":"Card Layer - Calypso Specification","type":"book"},{"authors":null,"categories":null,"content":"\nThe diagram below shows the dependencies between the client application, the certifiable framework components and the terminal APIs:\nKey points:\nIndependent Lifecycle: Each API follows its own distinct lifecycle. Interface-Exclusive: APIs exclusively consist of interfaces. Public APIs: Some APIs are intended to be used by application developers. Internal Usage: Some APIs are dedicated to internal use, and intended to developers of specific implementations. ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1748439892,"objectID":"eb9f46741b54a12927afa2c6e843d991","permalink":"https://terminal-api.calypsonet.org/specifications/card-layer-storagecard/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/card-layer-storagecard/","section":"specifications","summary":"The diagram below shows the dependencies between the client application, the certifiable framework components and the terminal APIs:\nKey points:\nIndependent Lifecycle: Each API follows its own distinct lifecycle. Interface-Exclusive: APIs exclusively consist of interfaces.","tags":null,"title":"Card Layer - Storage Card Specification","type":"book"},{"authors":null,"categories":null,"content":" Contributing Find out how to contribute to the Calypso Networks Terminal API project and how it can benefit your organization.\nRoadmap Overview of past and future API Releases.\n","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1724933835,"objectID":"460964d71a5606848132aa51ae04f454","permalink":"https://terminal-api.calypsonet.org/community/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/community/","section":"community","summary":"Contributing Find out how to contribute to the Calypso Networks Terminal API project and how it can benefit your organization.\nRoadmap Overview of past and future API Releases.","tags":null,"title":"Community","type":"book"},{"authors":null,"categories":null,"content":"","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1748439892,"objectID":"a5408ec414e3fc16f4bde1a84b4dbf46","permalink":"https://terminal-api.calypsonet.org/specifications/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/","section":"specifications","summary":"","tags":null,"title":"Ticketing Terminal APIs Specifications","type":"book"},{"authors":null,"categories":null,"content":"Release procedure Create a branch dedicated to the current release. Check gradle.properties file: Check the consistency of the version. Check build.gradle.kts file: Use only released dependencies. Upgrade Keyple dependencies to their latest released versions. Update CHANGELOG.md file: Verify the consistency of the Unreleased section. Move content of Unreleased section to a new “release” section. Update bottom links. Build and test the component. Commit the modified files using if possible the commit message Release x.y.z. Push and create a pull request to merge the branch into main. Await the success of the build by the CI. Squash and merge the pull request. Await the success of the build by the CI. Create a release on GitHub: Set tag x.y.z Set release name x.y.z Set the content by copying/pasting the content of the current release description in the CHANGELOG.md file without the bottom links. Await the success of the build by the CI. Connect to Nexus Repository Manager of Calypsonet and go to “Staging Repositories” page: Select the correct folder to Close \u0026amp; Release. It must contain the manifests, the JAR and all the others elements (sources, javadoc). Close the folder. Release the folder. The other unwanted folders could be dropped. Check the availability of the release on the Maven Repository. This step may take from 10 minutes to 2 hours. Update this website: Update version in params.yaml file. Update others elements if needed. Commit and push the modifications. ","date":-62135596800,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1639758865,"objectID":"be8ec78af1ceb94560f6fb17d4ec6af9","permalink":"https://terminal-api.calypsonet.org/guides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/guides/","section":"guides","summary":"Release procedure Create a branch dedicated to the current release. Check gradle.properties file: Check the consistency of the version. Check build.gradle.kts file: Use only released dependencies. Upgrade Keyple dependencies to their latest released versions.","tags":null,"title":"Maintenance Guides","type":"book"},{"authors":null,"categories":null,"content":" Latest version 2.1.2 UML class diagram GitHub repository As part of the Card Layer, the Calypso Card API provides high-level functionality for selecting and performing transactions with Calypso cards.\nInterfaces The Calypso Card API provides the means to select a target card and then perform a transaction with the selected card.\nThe result of a card selection is a smart card image whose file structure and data records can be browsed. A transaction with a target card may involve a control SAM to secure the operations. The CalypsoCard interface provide accessors to recover the information of the selected smart card.\nTo optimize the number of exchanges with a card reader, the Calypso Card API allows grouping the commands. A set of commands could be first prepared, and then be processed by a selected target at the selection or during the transaction. A transaction with a Calypso card is fully managed through the CardTransactionManager interface:\nSelection of a Calypso card A Calypso card selection could be defined to accept or not invalidated card.\nThrough the selection only basic Select File (without changing DF) or Read Records commands could joined: the goal is to recover in the selection result some file status or record data of elements present in all cards of a ticketing networks. The type of card product has not yet been identified, the commands are prepared to be supported by all types of card products: Prime, Light, or Regular.\nThen, if a Calypso card has matched the selection request, a Calypso card image is returned, some file headers or file records could be filled depending on the information recovered in the responses of the Select File or Read Records processed.\nCalypso card transaction without secure session Except the operations involving secure processing on “data” (data signature computation / verification, data ciphering / un-ciphering), only commands for the card need to be prepared though the Card Transaction Manager interface. Depending on the operation, if necessary the security involving the master SAM must be controlled internally by the Calypso library.\nPlain PIN Verification or Update Calypso Card API - Verify / Change Plain PIN - Sequence Diagram Ciphered Key / PIN update outside a session Calypso Card API - Change Key / Ciphered PIN outside a session - Sequence Diagram Data secure processing (data PSO signature / ciphering) outside a session Calypso Card API - Data secure processing outside a session - Sequence Diagram Stored Value operation outside a session Calypso Card API - standalone Stored Value transaction - Sequence Diagram Secure session with a Calypso card Regular secure session optimized for fast embedded performance This example illustrates the ticketing processing of a validation: only the necessary data is read from the card.\nFor access control to a transit network or a building, using a contactless card to authenticate the holder’s rights, ticketing terminals are generally automatic machines for which the rights verification transaction is automatically launched when the contactless card is detected in the RF field emitted by the terminal’s reader. For transactions to run smoothly, without the need for error recovery, it is important that the contactless transaction with the card is very fast, and that the card presentation and withdrawal detection phases are reliably managed.\nThe aim is to save milliseconds by minimizing the volume of data transmitted during contactless communication with the card to complete the ticketing transaction.\nIn order to limit the amount of data to be read from the card to the strict minimum, card reading operations cannot be grouped together. Each card response needs to be analyzed, to determine whether the next reading operation is necessary. Reducing the volume of data transmitted by the contactless card reader also reduces the amount of data to be transmitted to the SAM reader during the session, in order to update the session hash calculation.\nOn the SAM side, it is necessary to:\nlimit the number of operations to be performed during the contactless card transaction: SAM challenge recovery can be anticipated before a card transaction. group as many SAM exchanges as possible to be processed during the session (to counteract contact reader latency, and to share an APDU command header with a maximum amount of data to be transmitted) It is therefore necessary to anticipate card responses to write commands (counter increment/decrement). Under these conditions, only one group of SAM commands is needed during the card transaction to generate the SAM session MAC. Card authenticity verification can be performed while waiting for card removal.\nThe contactless reader of a configured and active ticketing terminal can switch between 3 states:\nin ‘standby mode’, the reader is waiting for a new card to be detected. when a card is detected, the reader is in card ‘processing mode’. when the card transaction is completed, the reader is ‘waiting for the …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748439892,"objectID":"6ad7cc20aaf4cc03812350271d69b202","permalink":"https://terminal-api.calypsonet.org/specifications/calypso-layer/calypso-card-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/calypso-layer/calypso-card-api/","section":"specifications","summary":"Public high-level API which standardizes the way to interact with a Calypso® product (card, NFC smartphone applet/application, SAM, etc.).","tags":null,"title":"Calypso Card API (external)","type":"book"},{"authors":null,"categories":null,"content":" Latest version 2.0.1 UML class diagram GitHub repository As part of the Reader Layer, the Reader API provides high-level functionality for identifying, monitoring, configuring readers and process card selection scenarios.\nInterfaces The Reader API is a high-level interface used by terminal applications to operate smart card readers, it:\nprovides the means to identify card readers and verify the presence of smart cards.\noffers the possibility to configure the observation of readers in order to be notified on card insertion or withdrawal.\nis the entry point to manage the selection of a smart card in a specific reader.\nReader identification Any smart card reader entity should be accessible through an implementation of the CardReader interface. Each is defined with a specific name. A reader could be designed to operate contactless card or a contact card. Finally, this interface can inform about the presence of a card in the reader.\nConfigurableCardReader A reader with the capability to configure the communication protocols with smart card (contactless or contact) could implement the ConfigurableCardReader interface to activate or deactivate some communication protocols.\nReader observation If a reader has the ability to dynamically detect changes on the card presence, then it can also implement the interface ObservableCardReader.\nObservers implementing the CardReaderObserverSpi could be declared to an observable card reader to be notified on specific CardReaderEvent: card insertion, card selection (matched), or card removal.\nCard Selection The CardSelectionManager provides the possibility to prepare a request that could contain one or several card application selections.\nThe CardSelection SPI interface could be extended by the API of a specific smart card solution to improve the selection request with settings specific to the smart card solution.\nThrough the card selection manager, the prepared card selections could be managed in\nsynchronously: processed directly on a specific card reader on which a card is already present,\nor asynchronously: scheduled on a specific observable reader in order to be operated dynamically in case of card insertion detection.\nIf several card selections are prepared, the card selection manager operate the card selection in the order of preparation. By default, the card selection manager stops the card selection processing on the first successful card selection, and the logical channel is kept open.\nIn case the multiple selection mode is activated during the preparation, the card selection manager tries to operate ‘all’ the prepared selections, even if one or several of them are successful. If the last selection is successful, the logical channel could be kept open with the last selected application.\nduring the card selection preparation, it could also be explicitly requested to close the logical channel after the card selection.\nMoreover, it is possible to export/import a selection scenario in JSON format.\nCard selection modes Depending on the card transaction use case, or on the reader capability, there are two ways to manage the selection of a card:\nEither synchronously on a simple reader, a selection could be operated directly by transmitting the card selection scenario. In this case the same entity manages both the card selection and the card processing. Otherwise asynchronously on an observable reader, a scheduled card selection could be defined. In this case the card selection is operated automatically at the insertion of the card. In this case, the card selection is next managed by the observable reader, but the card processing is managed by a reader observer. Reader API - Card Selection Modes - Activity Diagram Observable reader states An observable reader is active only when at least one reader observer is registered, and if the start of the detection has been requested. When active, an observable reader could switch between three internal states:\nWait for card insertion Wait for card processing Wait for card removal In the nominal case, a reader observer indicates to the observable reader that the processing of the card is finished by releasing the card channel. To manage a failure of the reader observer process, the observable reader interface provides also a method to finalize the card processing.\nReader API - Observable Reader States - Activity Diagram The states could be switched:\ndue to an explicit API request (blue arrows): the release of the card channel, the call of an observable reader method: the addition or the remove of an observable reader, a request to start or stop the detection, to finalize the card processing. Or because of an external event (red arrows), the insertion or the remove of a card. the insertion of a card causing the observable reader to notify a CARD_MATCHED reader event (in case of successful scheduled selection) or a CARD_INSERTED reader event (notification mode defined as ALWAYS). the removal of a card causing the observable reader to …","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748348792,"objectID":"bb15af3237bfa6b8714a7ace9e705a61","permalink":"https://terminal-api.calypsonet.org/specifications/reader-layer/reader-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/reader-layer/reader-api/","section":"specifications","summary":"Public API which defines the elements shared by the reader.","tags":null,"title":"Reader API (external)","type":"book"},{"authors":null,"categories":null,"content":" Latest version 0.1.0 UML class diagram GitHub repository As part of the Card Layer, the Storage Card API provides high-level functionality for selecting and performing transactions with storage cards (NXP Mifare Ultralight, ST Microelectronics ST25 / SRT512, etc.).\nInterfaces The Storage Card API provides the means to select a target card and then perform a transaction with the selected card.\nThe result of a card selection is a storage card image whose UID and data blocks can be browsed. The StorageCard interface provide accessors to recover the information of the selected storage card.\nTo optimize the number of exchanges with a card reader, the Storage Card API allows grouping the commands. A set of commands could be first prepared, and then be processed by a selected target at the selection or during the transaction. A transaction with a storage card is fully managed through the StorageCardTransactionManager interface:\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748439892,"objectID":"482d77093614b53d79a1d9a4819bba22","permalink":"https://terminal-api.calypsonet.org/specifications/card-layer-storagecard/storagecard-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/card-layer-storagecard/storagecard-api/","section":"specifications","summary":"Public high-level API which standardizes the way to interact with storage cards (NXP Mifare Ultralight, ST Microelectronics ST25 / SRT512, etc.).","tags":null,"title":"Storage Card API (external)","type":"book"},{"authors":null,"categories":null,"content":" Latest version 2.0.1 UML class diagram GitHub repository As part of the Reader Layer, the Calypsonet Terminal Card API defines the internal elements shared by the reader layer to implement specific card layers (like the Calypso Card layer).\nInterfaces APDU construction rules APDU requests expected by the Card API must strictly comply with ISO/IEC 7816-3, requiring Case 4 commands, i.e containing ingoing and outgoing data, to include the Le field.\nWe strongly recommend setting this field to 00h.\nLimitations \u0026amp; constraints The Card API doesn’t allow to request the transmission to a card of the APDU commands “Select Application by DF Name” or “Get Response”:\nthe selection of a specific card application could be managed only through a Card Selection Request. the APDU response status words 61XYh \u0026amp; 6CXYh are automatically handled by the reader layer library by issuing a Get Response or by re-issuing the previous command with the expected ‘Le’ field. ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748348792,"objectID":"396c1110bbe6a4c2e3254e73d2f3aadc","permalink":"https://terminal-api.calypsonet.org/specifications/reader-layer/card-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/reader-layer/card-api/","section":"specifications","summary":"Internal API which defines the elements shared between the reader layer and the card layer.","tags":null,"title":"Card API (internal)","type":"book"},{"authors":null,"categories":null,"content":" Latest version 0.7.0 UML class diagram GitHub repository As part of the Card Layer, the Calypso Crypto Legacy SAM API provides high-level functionality for selecting and performing transactions with Calypso Legacy SAMs and can also be coupled with the Calypso Card API to handle the cryptographic calculations required for Calypso card transactions secured by symmetric keys.\nInterfaces The Calypso Crypto Legacy SAM API provides the means to select a target or control SAM and then perform a transaction with the selected target.\nThe result of a SAM selection is a smartcard image whose keys’ parameters can be read. A transaction with a target SAM may involve a control SAM in order to secure the operations. The LegacySam interface provide accessors in order to recover the information of the selected smartcard.\nTo optimize the number of exchanges with a SAM reader, the Legacy SAM API allows to group the commands. A set of command could be first prepared, and then be processed by a selected target at the selection or during the transaction. A transaction with a Calypso SAM is fully managed through one of the LSTransactionManager interfaces:\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748439892,"objectID":"c10578fe20bc7ee273ea8d07b0923094","permalink":"https://terminal-api.calypsonet.org/specifications/calypso-layer/calypso-legacysam-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/calypso-layer/calypso-legacysam-api/","section":"specifications","summary":"Public high-level API which standardizes the way to interact with a Calypso® legacy SAM product (SAM-C1, HSM-C1, etc.).","tags":null,"title":"Calypso Legacy SAM API (external)","type":"book"},{"authors":null,"categories":null,"content":" Latest version 0.1.1 UML class diagram GitHub repository The Calypso Crypto Symmetric API is the communication interface between the Calypso Card and the Calypso Symmetric Crypto libraries (e.g. Legacy SAM, Open SAM).\nInterfaces ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748348792,"objectID":"209a3029aad4487a45c4227125b6ee5f","permalink":"https://terminal-api.calypsonet.org/specifications/calypso-layer/calypso-symmetric-crypto-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/calypso-layer/calypso-symmetric-crypto-api/","section":"specifications","summary":"Internal API which defines the elements shared between the Calypso Card and the Calypso Symmetric Crypto libraries.","tags":null,"title":"Calypso Symmetric Crypto API (internal)","type":"book"},{"authors":null,"categories":null,"content":" Latest version 0.2.0 UML class diagram GitHub repository The Calypso Crypto Asymmetric API is the communication interface between the Calypso Card and the Calypso Asymmetric Crypto libraries.\nInterfaces ","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1748348792,"objectID":"2404a829316824df539e0e71a271b9fc","permalink":"https://terminal-api.calypsonet.org/specifications/calypso-layer/calypso-asymmetric-crypto-api/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/specifications/calypso-layer/calypso-asymmetric-crypto-api/","section":"specifications","summary":"Internal API which defines the elements shared between the Calypso Card and the Calypso Asymmetric Crypto libraries.","tags":null,"title":"Calypso Asymmetric Crypto API (internal)","type":"book"}]