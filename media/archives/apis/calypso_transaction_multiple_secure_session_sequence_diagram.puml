@startuml

'skinparam ClassBorderColor #F1C40F
skinparam ClassBorderColor #D4AC0D
skinparam stereotypeABorderColor #A9DCDF
skinparam stereotypeIBorderColor #B4A7E5
skinparam stereotypeCBorderColor #ADD1B2
skinparam stereotypeEBorderColor #EB93DF
skinparam shadowing false

skinparam StateBorderColor #D4AC0D
skinparam ActivityBorderColor #D4AC0D

' Red
skinparam ClassBackgroundColor<<red>> #FDEDEC
skinparam ClassBorderColor<<red>> #E74C3C
hide <<red>> stereotype
' Purple
skinparam ClassBackgroundColor<<purple>> #F4ECF7
skinparam ClassBorderColor<<purple>> #8E44AD
hide <<purple>> stereotype
' blue
skinparam ClassBackgroundColor<<blue>> #EBF5FB
skinparam ClassBorderColor<<blue>> #3498DB
hide <<blue>> stereotype
' Green
skinparam ClassBackgroundColor<<green>> #EAFAF1
skinparam ClassBorderColor<<green>> #2ECC71
hide <<green>> stereotype

' Orange
skinparam ClassBackgroundColor<<orange>> #FDF2E9
skinparam ClassBorderColor<<orange>> #E67E22
hide <<orange>> stereotype

' Grey
skinparam ClassBackgroundColor<<grey>> #EAECEE
skinparam ClassBorderColor<<grey>> #2C3E50
hide <<grey>> stereotype

actor "Ticketing Application" as app #gold
participant "Calypso API" as capi #pink
participant "Reader API" as rapi #pink
participant "Calypso Card\nReader" as cardReader #lightBlue
boundary "**Card**" as card #lightBlue
participant "Calypso SAM\nReader" as samReader #lightGreen
boundary "selected\n**SAM**" as sam #lightGreen

activate app #gold
activate sam #lightGreen

activate card #lightBlue

app->capi: **cast** Calypso card
activate capi  #pink
capi-->app: [Calypso card image:\n\t- identification data\n\t- session buffer size]

deactivate capi

== Card secure transaction ==

app->app: **instantiate** Calypso card transaction:\n\t- Calypso card resource\n\t- Calypso SAM resource

note over capi
    Reads again the environment data inside the session to authenticate them.
end note

app->capi: <font color=red>**prepare**</font> card transaction:\n\t- open secure session (\n\t\tLOAD access level,\n\t\tMULTIPLE mode)\n\t- update environment file\n\t- update contract list\n\t- update contract #1\n\t- update contract #2\n\t- update contract #3\n\t- update contract #4\n\t- update all counters\n\t- update event log #1\n\t- update event log #2\n\t- update event log #3\n\t- close secure session (as ratified)
activate capi  #pink
capi-->app
deactivate capi

app->capi: <font color=red>**process**</font> commands (close channel after)
activate capi  #pink

capi-[#00FF00]>samReader: <font color=green>**SAM #1**<font color=red>\ntransmit card request\n\t- APDU list
activate samReader #lightGreen
samReader->sam: get challenge
sam-->samReader: [SAM challenge 1]
samReader-[#00FF00]->capi: [SAM challenge 1]
deactivate samReader

capi->capi: anticipates session buffer overflow

capi-[#0000FF]>cardReader: <font color=blue>**Card #2**</font>\ntransmit card request\n\t- APDU list
activate cardReader #lightBlue

group Card APDU commands inside session <font color=red>**1**</font>
    cardReader->card: open secure session (card debit key,\n\tSAM challenge 1)
    card-->cardReader: [card challenge 1]

    cardReader->card: update record (environment)
    card-->cardReader: ack
    cardReader->card: update record (contract list)
    card-->cardReader: ack
    cardReader->card: update record (contract #1)
    card-->cardReader: ack
    cardReader->card: update record (contract #2)
    card-->cardReader: ack
    cardReader->card: update record (contract #3)
    card-->cardReader: ack
    cardReader->card: update record (contract #4)
    card-->cardReader: ack
    cardReader->card: update record (all counters)
    card-->cardReader: ack
end

cardReader--[#0000FF]>capi: [card challenge]
deactivate cardReader

capi-[#00FF00]>samReader: <font color=green>**SAM #2**</font>\ntransmit card request\n\t- APDU list
activate samReader #lightGreen

samReader->sam: select diversifier (card serial)
sam-->samReader
samReader->sam: digest init (opening data)
sam-->samReader
samReader->sam: digest update (update environment)
sam-->samReader
samReader->sam: digest update (update contract list)
sam-->samReader
samReader->sam: digest update (update contract #1)
sam-->samReader
samReader->sam: digest update (update contract #2)
sam-->samReader
samReader->sam: digest update (update contract #3)
sam-->samReader
samReader->sam: digest update (update contract #4)
sam-->samReader

note over samReader
    Close card session before session buffer overflow.
end note

samReader->sam: digest close
sam-->samReader: [SAM certificate 1]
samReader-[#00FF00]->capi: [SAM challenge 1]
deactivate samReader


capi-[#0000FF]>cardReader: <font color=blue>**Card #3**</font>\ntransmit card request\n\t- APDU list
activate cardReader #lightBlue

cardReader->card: close secure session (SAM certificate 1)
card-->cardReader: [card certificate 1]

cardReader--[#0000FF]>capi: [card certificate 1]
deactivate cardReader


capi-[#00FF00]>samReader: <font color=green>**SAM #3**</font>\ntransmit card request\n\t- APDU list
activate samReader #lightGreen

samReader->sam: digest authenticate (card certificate 1)
sam-->samReader: [authentication status 1]
'samReader-[#00FF00]->capi: [authentication status]
'deactivate samReader
'capi-[#00FF00]>samReader: <font color=green>**SAM #4**</font>\ntransmit card request\n\t- APDU list
'activate samReader #lightGreen

samReader->sam: get challenge
sam-->samReader: [SAM challenge 2]
samReader-[#00FF00]->capi: [authentication status 1, SAM challenge 2]
deactivate samReader


capi-[#0000FF]>cardReader: <font color=blue>**Card #4**</font>\ntransmit card request\n\t- APDU list
activate cardReader #lightBlue

note over cardReader
    The card modifications aren't managed in an atomic way (split between sessions 1 & 2).
end note

group Card APDU commands inside session <font color=red>**2**</font>
    cardReader->card: open secure session (card debit key,\n\tSAM challenge 2)
    card-->cardReader: [card challenge 2]
    cardReader->card: update record (event log #1)
    card-->cardReader: ack
    cardReader->card: update record (event log #2)
    card-->cardReader: ack
    cardReader->card: update record (event log #3)
    card-->cardReader: ack
end

cardReader--[#0000FF]>capi: [card certificate 1]
deactivate cardReader

capi-[#00FF00]>samReader: <font color=green>**SAM #4**</font>\ntransmit card request\n\t- APDU list
activate samReader #lightGreen

note over samReader
    Anticipate second session with the same diversifier.
end note

samReader->sam: digest init (opening data)
sam-->samReader
samReader->sam: digest update (update event log #1)
sam-->samReader
samReader->sam: digest update (update event log #2)
sam-->samReader
samReader->sam: digest update (update event log #3)
sam-->samReader
samReader->sam: digest close
sam-->samReader: [SAM certificate 2]

samReader-[#00FF00]->capi: [SAM certificate 2]
deactivate samReader

capi-[#0000FF]>cardReader: <font color=blue>**Card #5**</font>\ntransmit card request\n\t- APDU list
activate cardReader #lightBlue

cardReader->card: close secure session (SAM certificate 2)
card-->cardReader: [card certificate 2]
cardReader->card: close card channel
card-->cardReader
deactivate card

cardReader-[#0000FF]->capi: [card certificate]
deactivate cardReader

capi-[#00FF00]>samReader: <font color=green>**SAM #5**</font>\ntransmit card request\n\t- APDU list
activate samReader #lightGreen
samReader->sam: digest authenticate (card certificate 2)
sam-->samReader: [authentication status]

samReader-[#00FF00]->capi: [authentification status]
deactivate samReader

capi-->app: [Calypso card image:\n\t- environment file\n\t- contract list\n\t- contract #1\n\t- contract #2\n\t- contract #3\n\t- contract #4\n\t- all counters\n\t- event log #1\n\t- event log #2\n\t- event log #3]\nauthentification status
deactivate capi
@enduml