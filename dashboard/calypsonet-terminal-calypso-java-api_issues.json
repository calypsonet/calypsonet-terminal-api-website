[
  {
    "url": "https://api.github.com/repos/calypsonet/calypsonet-terminal-calypso-java-api/issues/50",
    "repository_url": "https://api.github.com/repos/calypsonet/calypsonet-terminal-calypso-java-api",
    "labels_url": "https://api.github.com/repos/calypsonet/calypsonet-terminal-calypso-java-api/issues/50/labels{/name}",
    "comments_url": "https://api.github.com/repos/calypsonet/calypsonet-terminal-calypso-java-api/issues/50/comments",
    "events_url": "https://api.github.com/repos/calypsonet/calypsonet-terminal-calypso-java-api/issues/50/events",
    "html_url": "https://github.com/calypsonet/calypsonet-terminal-calypso-java-api/issues/50",
    "id": 1460388122,
    "node_id": "I_kwDOFgYEwM5XC8Ea",
    "number": 50,
    "title": "Am√©lioration de la gestion des KIF KVC par d√©faut et KVC autoris√©s",
    "user": {
      "login": "kfereira",
      "id": 9805882,
      "node_id": "MDQ6VXNlcjk4MDU4ODI=",
      "avatar_url": "https://avatars.githubusercontent.com/u/9805882?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/kfereira",
      "html_url": "https://github.com/kfereira",
      "followers_url": "https://api.github.com/users/kfereira/followers",
      "following_url": "https://api.github.com/users/kfereira/following{/other_user}",
      "gists_url": "https://api.github.com/users/kfereira/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/kfereira/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/kfereira/subscriptions",
      "organizations_url": "https://api.github.com/users/kfereira/orgs",
      "repos_url": "https://api.github.com/users/kfereira/repos",
      "events_url": "https://api.github.com/users/kfereira/events{/privacy}",
      "received_events_url": "https://api.github.com/users/kfereira/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "open",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 1,
    "created_at": "2022-11-22T18:44:18Z",
    "updated_at": "2022-11-23T08:38:45Z",
    "closed_at": null,
    "author_association": "NONE",
    "active_lock_reason": null,
    "body": "Actuellement lors de la cr√©ation d'un objet CardSecuritySetting il est possible d'assigner des kif/kvc √† utiliser par d√©faut ainsi qu'une liste de KVC autoris√©s.\r\n\r\nDans le cas o√π aucun KIF n'est remont√© lors du OPEN SESSION le KIF par d√©faut est utilis√©. \r\nLa fa√ßon de cr√©er CardSecuritySetting actuellement ne permet de fournir un KIF par d√©faut en fonction du KVC r√©cup√©r√© de la carte. \r\n\r\nAussi concernant la liste de KVC autoris√©s, la d√©termination d'une telle liste n'est pas toujours statique et peut n√©cessiter de connaitre le KIF lu de la carte.\r\n\r\nLe but de ce ticket est de permettre de fournir les KIF / KVC √† utiliser par d√©faut ainsi que la liste des KVC autoris√©s via des interfaces (SPI) que nous impl√©menterons selon nos sp√©cificit√©s.\r\n\r\nCa se traduirait  en la cr√©ation de deux SPI: \r\n\r\n```java  \r\npublic interface DefaultKifKvcProviderSpi {\r\n    byte[] computeKifKvc(Byte cardKif, Byte cardKvc);\r\n}\r\n\r\npublic interface KifKvcAuthorizationServiceSpi {\r\n    boolean isAuthorizedKey(Byte kif, Byte kvc);\r\n}\r\n\r\n```\r\n\r\nCes SPI serait affect√©e au CardSecuritySetting via les m√©thodes: \r\n```java\r\n\r\n  CardSecuritySetting assignDefaultKifKvcProvider(WriteAccessLevel writeAccessLevel, DefaultKifKvcProviderSpi kifKvcProvider);\r\n\r\n  CardSecuritySetting setKifKvcAuthorizationService(KifKvcAuthorizationServiceSpi kifKvcAuthorizationServiceSpi);\r\n\r\n```\r\n\r\n### Les impactes sur la lib `keyple-card-calypso-java-lib`\r\n\r\nDans la classe `CardSecuritySettingAdapter` :\r\n\r\n```java\r\n    boolean isSessionKeyAuthorized(Byte kif, Byte kvc) {\r\n        if (kif == null || kvc == null) {\r\n            return false;\r\n        }\r\n        //üëâ On utilise la nouvelle SPI si elle est valoris√©e \r\n        if(kifKvcAuthorizationServiceSpi != null) {\r\n            return kifKvcAuthorizationServiceSpi.isAuthorizedKey(kif, kvc);\r\n        }\r\n        if (authorizedSessionKeys.isEmpty()) {\r\n            return true;\r\n        }\r\n        return authorizedSessionKeys.contains(((kif << 8) & 0xff00) | (kvc & 0x00ff));\r\n    }\r\n\r\n``` \r\n\r\nDans la m√©thode `processAtomicOpenning` de la classe `CardTransactionManagerAdapter`:\r\n```java\r\n    byte[] kifKvc = controlSamTransactionManager.computeKifKvc(writeAccessLevel, cardKif, cardKvc);\r\n    Byte kif = kifKvc[0];\r\n    Byte kvc = kifKvc[1];\r\n\r\n```\r\n\r\nDans la classe `CardControlSamTransactionManagerAdapter`:\r\n```java \r\nbyte[] computeKifKvc(WriteAccessLevel writeAccessLevel, Byte cardKif, Byte cardKvc) {\r\n        DefaultKifKvcProviderSpi defaultKifKvcProviderSpi = cardSecuritySetting.getDefaultKifKvcProviderSpi();\r\n\r\n        if (defaultKifKvcProviderSpi != null) {\r\n           //üëâ On utilise la nouvelle SPI si elle est valoris√©e \r\n            return defaultKifKvcProviderSpi.computeKifKvc(cardKif, cardKvc);\r\n        } else {\r\n            Byte kvc = computeKvc(writeAccessLevel, cardKvc);\r\n            Byte kif = computeKif(writeAccessLevel, cardKif, kvc);\r\n            return new byte[]{kif, kvc};\r\n        }\r\n    }\r\n```\r\n\r\n",
    "reactions": {
      "url": "https://api.github.com/repos/calypsonet/calypsonet-terminal-calypso-java-api/issues/50/reactions",
      "total_count": 0,
      "+1": 0,
      "-1": 0,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    },
    "timeline_url": "https://api.github.com/repos/calypsonet/calypsonet-terminal-calypso-java-api/issues/50/timeline",
    "performed_via_github_app": null,
    "state_reason": null
  }
]
